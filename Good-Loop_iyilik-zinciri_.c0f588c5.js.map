{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,CEGA,G,M,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,EDHA,EAAA,OAAA,CAAkB,MAAA,CAAmB,SAAU,IAAI,CAAC,IAAM,EAAc,S,GCGpE,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,wBAAyB,CAC3D,IAAM,EAAe,SAAS,cAAc,CAAC,kBACvC,EAAoB,SAAS,cAAc,CAAC,uBAC5C,EAAa,SAAS,cAAc,CAAC,eACrC,EAAY,SAAS,cAAc,CAAC,cACpC,EAAmB,SAAS,cAAc,CAAC,gBAC3C,EAAW,EAAkB,aAAa,CAAC,UAGjD,EAAkB,SAAS,CAAC,GAAG,CAAC,UAChC,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAS,QAAQ,CAAG,CAAA,EAEpB,EAAa,gBAAgB,CAAC,SAAU,MAAO,IAC3C,EAAE,cAAc,GAChB,GAAI,CACA,MAAM,cAAc,CAAE,SAAU,EAAW,KAAK,AAAC,GACjD,MAAM,yFACN,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAkB,SAAS,CAAC,MAAM,CAAC,SACvC,CAAE,MAAO,EAAO,CAEZ,GADA,QAAQ,KAAK,CAAC,0BAA2B,GACrC,AAAe,8BAAf,EAAM,IAAI,EAAoC,AAAe,8BAAf,EAAM,IAAI,CAAkC,CAC1F,GAAM,CAAA,iBAAE,CAAgB,CAAE,CAAG,MAA7B,EAAA,SACA,GAAI,CACA,MAAM,EAAiB,CAAE,SAAU,EAAW,KAAK,AAAC,GACpD,MAAM,+JACN,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,cAAc,kBAAkB,EAAE,mBAAmB,EAAW,KAAK,EAAA,CAAG,AACtG,CAAE,MAAO,EAAa,CAClB,QAAQ,KAAK,CAAC,kCAAmC,GACjD,MAAM,0CACV,CACJ,MACI,MAAM,EAAM,OAAO,CAE3B,CACJ,GAEA,IAAM,EAAsB,KACxB,EAAS,QAAQ,CAAG,CAAE,CAAA,EAAU,KAAK,CAAC,MAAM,CAAG,GAAK,EAAiB,KAAK,CAAC,MAAM,CAAG,CAAA,CACxF,EAEA,EAAU,gBAAgB,CAAC,QAAS,GACpC,EAAiB,gBAAgB,CAAC,QAAS,GAE3C,EAAkB,gBAAgB,CAAC,SAAU,MAAO,IAChD,EAAE,cAAc,GAChB,GAAI,CACA,MAAM,qBAAqB,CACvB,SAAU,EAAW,KAAK,CAC1B,iBAAkB,EAAU,KAAK,CACjC,YAAa,EAAiB,KAAK,AACvC,GACA,MAAM,4DACN,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,cAAc,UAAU,CAAC,AACvD,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,8BAA+B,GAC7C,MAAM,EAAM,OAAO,CACvB,CACJ,EACJ,CAGI,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC","sources":["<anon>","../../../.npm/_npx/b4a9aa12c0cf34a6/node_modules/@parcel/runtime-js/lib/runtime-985f6fc5eeb5de07.js","script.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire2757\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire2757\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8Wpxu\", function(module, exports) {\nmodule.exports = import(\"6fEqA\").then(()=>parcelRequire('brE3Z'));\n\n});\n\n// ... (other page logic remains the same)\n// --- Logic for forgot-password.html ---\n\nif (window.location.pathname.includes('forgot-password.html')) {\n    const sendCodeForm = document.getElementById('send-code-form');\n    const resetPasswordForm = document.getElementById('reset-password-form');\n    const emailInput = document.getElementById('reset-email');\n    const codeInput = document.getElementById('reset-code');\n    const newPasswordInput = document.getElementById('new-password');\n    const resetBtn = resetPasswordForm.querySelector('button');\n    // Initial state\n    resetPasswordForm.classList.add('hidden');\n    sendCodeForm.classList.remove('hidden');\n    resetBtn.disabled = true;\n    sendCodeForm.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        try {\n            await resetPassword({\n                username: emailInput.value\n            });\n            alert(\"S\\u0131f\\u0131rlama kodu e-postana g\\xf6nderildi. Spam (gereksiz) klas\\xf6r\\xfcn\\xfc kontrol etmeyi unutma.\");\n            sendCodeForm.classList.add('hidden');\n            resetPasswordForm.classList.remove('hidden');\n        } catch (error) {\n            console.error(\"\\u015Eifre s\\u0131f\\u0131rlama hatas\\u0131:\", error);\n            if (error.name === 'UserNotConfirmedException' || error.name === 'InvalidParameterException') {\n                const { resendSignUpCode: resendSignUpCode } = await (parcelRequire(\"8Wpxu\"));\n                try {\n                    await resendSignUpCode({\n                        username: emailInput.value\n                    });\n                    alert(\"\\u015Eifrenizi s\\u0131f\\u0131rlamak i\\xe7in \\xf6nce e-postan\\u0131z\\u0131 do\\u011Frulaman\\u0131z gerekiyor. Size yeni bir do\\u011Frulama kodu g\\xf6nderdik, l\\xfctfen spam (gereksiz) klas\\xf6r\\xfcn\\xfcz\\xfc kontrol edin.\");\n                    window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(emailInput.value)}`;\n                } catch (resendError) {\n                    console.error(\"Do\\u011Frulama kodu g\\xf6nderme hatas\\u0131:\", resendError);\n                    alert(\"Bir hata olu\\u015Ftu. L\\xfctfen tekrar deneyin.\");\n                }\n            } else alert(error.message);\n        }\n    });\n    const validateResetInputs = ()=>{\n        resetBtn.disabled = !(codeInput.value.length > 0 && newPasswordInput.value.length > 0);\n    };\n    codeInput.addEventListener('input', validateResetInputs);\n    newPasswordInput.addEventListener('input', validateResetInputs);\n    resetPasswordForm.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        try {\n            await confirmResetPassword({\n                username: emailInput.value,\n                confirmationCode: codeInput.value,\n                newPassword: newPasswordInput.value\n            });\n            alert(\"\\u015Eifren ba\\u015Far\\u0131yla de\\u011Fi\\u015Ftirildi. \\u015Eimdi giri\\u015F yapabilirsin.\");\n            window.location.href = `${getBasePath()}index.html`;\n        } catch (error) {\n            console.error(\"Yeni \\u015Fifre ayarlama hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n}\n// --- Logic for home.html ---\nwindow.location.pathname.includes('home.html');\n\n\n//# sourceMappingURL=Good-Loop_iyilik-zinciri_.c0f588c5.js.map\n","module.exports = (__parcel__import__(\"6fEqA\")).then(() => parcelRequire('brE3Z'));","// ... (other page logic remains the same)\n\n// --- Logic for forgot-password.html ---\nif (window.location.pathname.includes('forgot-password.html')) {\n    const sendCodeForm = document.getElementById('send-code-form');\n    const resetPasswordForm = document.getElementById('reset-password-form');\n    const emailInput = document.getElementById('reset-email');\n    const codeInput = document.getElementById('reset-code');\n    const newPasswordInput = document.getElementById('new-password');\n    const resetBtn = resetPasswordForm.querySelector('button');\n\n    // Initial state\n    resetPasswordForm.classList.add('hidden');\n    sendCodeForm.classList.remove('hidden');\n    resetBtn.disabled = true;\n\n    sendCodeForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        try {\n            await resetPassword({ username: emailInput.value });\n            alert('Sıfırlama kodu e-postana gönderildi. Spam (gereksiz) klasörünü kontrol etmeyi unutma.');\n            sendCodeForm.classList.add('hidden');\n            resetPasswordForm.classList.remove('hidden');\n        } catch (error) {\n            console.error('Şifre sıfırlama hatası:', error);\n            if (error.name === 'UserNotConfirmedException' || error.name === 'InvalidParameterException') {\n                const { resendSignUpCode } = await import('aws-amplify/auth');\n                try {\n                    await resendSignUpCode({ username: emailInput.value });\n                    alert('Şifrenizi sıfırlamak için önce e-postanızı doğrulamanız gerekiyor. Size yeni bir doğrulama kodu gönderdik, lütfen spam (gereksiz) klasörünüzü kontrol edin.');\n                    window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(emailInput.value)}`;\n                } catch (resendError) {\n                    console.error('Doğrulama kodu gönderme hatası:', resendError);\n                    alert('Bir hata oluştu. Lütfen tekrar deneyin.');\n                }\n            } else {\n                alert(error.message);\n            }\n        }\n    });\n\n    const validateResetInputs = () => {\n        resetBtn.disabled = !(codeInput.value.length > 0 && newPasswordInput.value.length > 0);\n    };\n\n    codeInput.addEventListener('input', validateResetInputs);\n    newPasswordInput.addEventListener('input', validateResetInputs);\n\n    resetPasswordForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        try {\n            await confirmResetPassword({ \n                username: emailInput.value, \n                confirmationCode: codeInput.value, \n                newPassword: newPasswordInput.value \n            });\n            alert('Şifren başarıyla değiştirildi. Şimdi giriş yapabilirsin.');\n            window.location.href = `${getBasePath()}index.html`;\n        } catch (error) {\n            console.error('Yeni şifre ayarlama hatası:', error);\n            alert(error.message);\n        }\n    });\n}\n\n// --- Logic for home.html ---\nif (window.location.pathname.includes('home.html')) {\n    // ... (home logic remains the same)\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","then","window","location","pathname","includes","sendCodeForm","document","getElementById","resetPasswordForm","emailInput","codeInput","newPasswordInput","resetBtn","querySelector","classList","add","remove","disabled","addEventListener","e","preventDefault","resetPassword","username","value","alert","error","console","name","resendSignUpCode","href","getBasePath","encodeURIComponent","resendError","message","validateResetInputs","length","confirmResetPassword","confirmationCode","newPassword"],"version":3,"file":"Good-Loop_iyilik-zinciri_.c0f588c5.js.map"}