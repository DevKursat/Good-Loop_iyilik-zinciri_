{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["var $c1ce9d969bfa6909$exports = {};\n// Function to get the correct base path for redirects\nfunction $c1ce9d969bfa6909$var$getBasePath() {\n    // For local development, path is relative to root.\n    // For GitHub Pages, it's /Good-Loop_iyilik-zinciri_/\n    return window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1') ? '/' : '/Good-Loop_iyilik-zinciri_/';\n}\n// Function to check if user is authenticated and redirect\nasync function $c1ce9d969bfa6909$var$checkAuthAndRedirect() {\n    try {\n        await getCurrentUser();\n        // User is authenticated, redirect to home.html if not already there\n        if (!window.location.pathname.includes('home.html')) window.location.href = `${$c1ce9d969bfa6909$var$getBasePath()}home.html`;\n    } catch (error) {\n        // User is not authenticated.\n        const isLoginPage = window.location.pathname === $c1ce9d969bfa6909$var$getBasePath() || window.location.pathname === `${$c1ce9d969bfa6909$var$getBasePath()}index.html`;\n        if (!isLoginPage && !window.location.pathname.includes('verify.html')) window.location.href = `${$c1ce9d969bfa6909$var$getBasePath()}index.html`;\n    }\n}\n// Execute checkAuthAndRedirect on page load for all pages except verify.html\nif (!window.location.pathname.includes('verify.html')) $c1ce9d969bfa6909$var$checkAuthAndRedirect();\n// Logic for index.html (Login/Signup Page)\nif (window.location.pathname.endsWith('/') || window.location.pathname.endsWith('index.html')) {\n    const container = document.getElementById('auth-container-animated');\n    const registerBtn = document.getElementById('register');\n    const loginBtn = document.getElementById('login');\n    const signupPasswordInput = document.getElementById('signup-password');\n    const strengthMeterContainer = document.getElementById('strength-meter-container');\n    const strengthBar = document.getElementById('strength-bar');\n    const strengthText = document.getElementById('strength-text');\n    const toggleForm = (isRegister)=>{\n        if (container) {\n            if (isRegister) container.classList.add('active');\n            else container.classList.remove('active');\n        }\n    };\n    if (registerBtn) registerBtn.addEventListener('click', ()=>toggleForm(true));\n    if (loginBtn) loginBtn.addEventListener('click', ()=>toggleForm(false));\n    // Password Strength Logic\n    if (signupPasswordInput) {\n        // Initial state\n        strengthText.textContent = \"Kay\\u0131t Ol\";\n        signupPasswordInput.addEventListener('input', ()=>{\n            const password = signupPasswordInput.value;\n            const requirements = [\n                {\n                    regex: /.{8,}/,\n                    message: \"En az 8 karakter\"\n                },\n                {\n                    regex: /[A-Z]/,\n                    message: \"B\\xfcy\\xfck harf (A-Z)\"\n                },\n                {\n                    regex: /[a-z]/,\n                    message: \"K\\xfc\\xe7\\xfck harf (a-z)\"\n                },\n                {\n                    regex: /[0-9]/,\n                    message: \"Say\\u0131 (0-9)\"\n                },\n                {\n                    regex: /[!@#$%^&*]/,\n                    message: \"\\xd6zel karakter (!@#$%^&*)\"\n                }\n            ];\n            if (password.length === 0) {\n                strengthText.textContent = \"Kay\\u0131t Ol\";\n                strengthMeterContainer.classList.remove('transformed');\n                strengthBar.style.width = `0%`;\n                return;\n            }\n            let strength = 0;\n            let firstUnmetRequirement = null;\n            requirements.forEach((req)=>{\n                if (req.regex.test(password)) strength++;\n                else if (!firstUnmetRequirement) firstUnmetRequirement = req.message;\n            });\n            const strengthPercentage = strength / requirements.length * 100;\n            strengthBar.style.width = `${strengthPercentage}%`;\n            // Update text and colors\n            if (strength === requirements.length) {\n                strengthText.textContent = \"Kay\\u0131t Ol\";\n                strengthMeterContainer.classList.add('transformed');\n            } else {\n                strengthText.textContent = `${strength}/${requirements.length}: ${firstUnmetRequirement || ''}`;\n                strengthMeterContainer.classList.remove('transformed');\n            }\n            strengthBar.classList.remove('weak', 'medium', 'strong');\n            if (strengthPercentage < 40) strengthBar.classList.add('weak');\n            else if (strengthPercentage < 80) strengthBar.classList.add('medium');\n            else strengthBar.classList.add('strong');\n        });\n    }\n    // Form submission logic (Amplify)\n    const loginForm = document.getElementById('login-form');\n    const signupForm = document.getElementById('signup-form');\n    if (loginForm) loginForm.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        const email = document.getElementById('login-email').value;\n        const password = document.getElementById('login-password').value;\n        try {\n            await signIn({\n                username: email,\n                password: password\n            });\n            alert(\"Giri\\u015F ba\\u015Far\\u0131l\\u0131!\");\n            window.location.href = `${$c1ce9d969bfa6909$var$getBasePath()}home.html`;\n        } catch (error) {\n            console.error(\"Giri\\u015F hatas\\u0131:\", error);\n            if (error.name === 'UserNotConfirmedException') {\n                alert(\"Hesab\\u0131n\\u0131z do\\u011Frulanmam\\u0131\\u015F. L\\xfctfen e-postan\\u0131z\\u0131 do\\u011Frulay\\u0131n.\");\n                window.location.href = `${$c1ce9d969bfa6909$var$getBasePath()}verify.html?email=${encodeURIComponent(email)}`;\n            } else alert(error.message);\n        }\n    });\n    if (signupForm) signupForm.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        const email = document.getElementById('signup-email').value;\n        const password = document.getElementById('signup-password').value;\n        try {\n            await signUp({\n                username: email,\n                password: password,\n                attributes: {\n                    email: email\n                }\n            });\n            alert(\"Kay\\u0131t ba\\u015Far\\u0131l\\u0131! L\\xfctfen e-postan\\u0131za g\\xf6nderilen do\\u011Frulama linkine t\\u0131klay\\u0131n.\");\n            window.location.href = `${$c1ce9d969bfa6909$var$getBasePath()}verify.html?email=${encodeURIComponent(email)}`;\n        } catch (error) {\n            console.error(\"Kay\\u0131t hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n}\n// Logic for verify.html (Email Verification Page)\nif (window.location.pathname.includes('verify.html')) {\n    const verifyForm = document.getElementById('verify-form');\n    const verifyEmailInput = document.getElementById('verify-email');\n    const verificationCodeInput = document.getElementById('verification-code');\n    const resendCodeButton = document.getElementById('resend-code-button');\n    const urlParams = new URLSearchParams(window.location.search);\n    const emailFromUrl = urlParams.get('email');\n    if (emailFromUrl) verifyEmailInput.value = emailFromUrl;\n    if (verifyForm) verifyForm.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        const email = verifyEmailInput.value;\n        const code = verificationCodeInput.value;\n        try {\n            await confirmSignUp({\n                username: email,\n                confirmationCode: code\n            });\n            alert(\"E-posta ba\\u015Far\\u0131yla do\\u011Fruland\\u0131! \\u015Eimdi giri\\u015F yap\\u0131l\\u0131yor...\");\n            window.location.href = `${$c1ce9d969bfa6909$var$getBasePath()}home.html`;\n        } catch (error) {\n            console.error(\"Do\\u011Frulama hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n    if (resendCodeButton) resendCodeButton.addEventListener('click', async ()=>{\n        const email = verifyEmailInput.value;\n        if (!email) {\n            alert(\"L\\xfctfen e-posta adresinizi girin.\");\n            return;\n        }\n        try {\n            await resendSignUpCode({\n                username: email\n            });\n            alert(\"Do\\u011Frulama kodu tekrar g\\xf6nderildi.\");\n        } catch (error) {\n            console.error(\"Kodu tekrar g\\xf6nderme hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n}\n// Logic for home.html (Home Page)\nif (window.location.pathname.includes('home.html')) {\n    const logoutButton = document.getElementById('logout-button');\n    if (logoutButton) logoutButton.addEventListener('click', async ()=>{\n        try {\n            await signOut();\n            alert(\"Ba\\u015Far\\u0131yla \\xe7\\u0131k\\u0131\\u015F yap\\u0131ld\\u0131.\");\n            window.location.href = `${$c1ce9d969bfa6909$var$getBasePath()}index.html`;\n        } catch (error) {\n            console.error(\"\\xc7\\u0131k\\u0131\\u015F yapma hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n}\n\n\n//# sourceMappingURL=Good-Loop_iyilik-zinciri_.2b4df4ea.js.map\n","// Function to get the correct base path for redirects\nfunction getBasePath() {\n    // For local development, path is relative to root.\n    // For GitHub Pages, it's /Good-Loop_iyilik-zinciri_/\n    return window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')\n        ? '/'\n        : '/Good-Loop_iyilik-zinciri_/';\n}\n\n// Function to check if user is authenticated and redirect\nasync function checkAuthAndRedirect() {\n    try {\n        await getCurrentUser();\n        // User is authenticated, redirect to home.html if not already there\n        if (!window.location.pathname.includes('home.html')) {\n            window.location.href = `${getBasePath()}home.html`;\n        }\n    } catch (error) {\n        // User is not authenticated.\n        const isLoginPage = window.location.pathname === getBasePath() || window.location.pathname === `${getBasePath()}index.html`;\n        if (!isLoginPage && !window.location.pathname.includes('verify.html')) {\n            window.location.href = `${getBasePath()}index.html`;\n        }\n    }\n}\n\n// Execute checkAuthAndRedirect on page load for all pages except verify.html\nif (!window.location.pathname.includes('verify.html')) {\n    checkAuthAndRedirect();\n}\n\n// Logic for index.html (Login/Signup Page)\nif (window.location.pathname.endsWith('/') || window.location.pathname.endsWith('index.html')) {\n    const container = document.getElementById('auth-container-animated');\n    const registerBtn = document.getElementById('register');\n    const loginBtn = document.getElementById('login');\n\n    const signupPasswordInput = document.getElementById('signup-password');\n    const strengthMeterContainer = document.getElementById('strength-meter-container');\n    const strengthBar = document.getElementById('strength-bar');\n    const strengthText = document.getElementById('strength-text');\n\n    const toggleForm = (isRegister) => {\n        if (container) {\n            if (isRegister) {\n                container.classList.add('active');\n            } else {\n                container.classList.remove('active');\n            }\n        }\n    };\n\n    if (registerBtn) registerBtn.addEventListener('click', () => toggleForm(true));\n    if (loginBtn) loginBtn.addEventListener('click', () => toggleForm(false));\n\n    // Password Strength Logic\n    if (signupPasswordInput) {\n        // Initial state\n        strengthText.textContent = \"Kayıt Ol\";\n\n        signupPasswordInput.addEventListener('input', () => {\n            const password = signupPasswordInput.value;\n            const requirements = [\n                { regex: /.{8,}/, message: \"En az 8 karakter\" },\n                { regex: /[A-Z]/, message: \"Büyük harf (A-Z)\" },\n                { regex: /[a-z]/, message: \"Küçük harf (a-z)\" },\n                { regex: /[0-9]/, message: \"Sayı (0-9)\" },\n                { regex: /[!@#$%^&*]/, message: \"Özel karakter (!@#$%^&*)\" }\n            ];\n\n            if (password.length === 0) {\n                strengthText.textContent = \"Kayıt Ol\";\n                strengthMeterContainer.classList.remove('transformed');\n                strengthBar.style.width = `0%`;\n                return;\n            }\n\n            let strength = 0;\n            let firstUnmetRequirement = null;\n\n            requirements.forEach(req => {\n                if (req.regex.test(password)) {\n                    strength++;\n                } else if (!firstUnmetRequirement) {\n                    firstUnmetRequirement = req.message;\n                }\n            });\n\n            const strengthPercentage = (strength / requirements.length) * 100;\n            strengthBar.style.width = `${strengthPercentage}%`;\n\n            // Update text and colors\n            if (strength === requirements.length) {\n                strengthText.textContent = \"Kayıt Ol\";\n                strengthMeterContainer.classList.add('transformed');\n            } else {\n                strengthText.textContent = `${strength}/${requirements.length}: ${firstUnmetRequirement || ''}`;\n                strengthMeterContainer.classList.remove('transformed');\n            }\n\n            strengthBar.classList.remove('weak', 'medium', 'strong');\n            if (strengthPercentage < 40) strengthBar.classList.add('weak');\n            else if (strengthPercentage < 80) strengthBar.classList.add('medium');\n            else strengthBar.classList.add('strong');\n        });\n    }\n\n    // Form submission logic (Amplify)\n    const loginForm = document.getElementById('login-form');\n    const signupForm = document.getElementById('signup-form');\n\n    if (loginForm) {\n        loginForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const email = document.getElementById('login-email').value;\n            const password = document.getElementById('login-password').value;\n            try {\n                await signIn({ username: email, password });\n                alert('Giriş başarılı!');\n                window.location.href = `${getBasePath()}home.html`;\n            } catch (error) {\n                console.error('Giriş hatası:', error);\n                if (error.name === 'UserNotConfirmedException') {\n                    alert('Hesabınız doğrulanmamış. Lütfen e-postanızı doğrulayın.');\n                    window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(email)}`;\n                } else {\n                    alert(error.message);\n                }\n            }\n        });\n    }\n\n    if (signupForm) {\n        signupForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const email = document.getElementById('signup-email').value;\n            const password = document.getElementById('signup-password').value;\n            try {\n                await signUp({ username: email, password, attributes: { email } });\n                alert('Kayıt başarılı! Lütfen e-postanıza gönderilen doğrulama linkine tıklayın.');\n                window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(email)}`;\n            } catch (error) {\n                console.error('Kayıt hatası:', error);\n                alert(error.message);\n            }\n        });\n    }\n}\n\n// Logic for verify.html (Email Verification Page)\nif (window.location.pathname.includes('verify.html')) {\n    const verifyForm = document.getElementById('verify-form');\n    const verifyEmailInput = document.getElementById('verify-email');\n    const verificationCodeInput = document.getElementById('verification-code');\n    const resendCodeButton = document.getElementById('resend-code-button');\n\n    const urlParams = new URLSearchParams(window.location.search);\n    const emailFromUrl = urlParams.get('email');\n    if (emailFromUrl) {\n        verifyEmailInput.value = emailFromUrl;\n    }\n\n    if (verifyForm) {\n        verifyForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const email = verifyEmailInput.value;\n            const code = verificationCodeInput.value;\n            try {\n                await confirmSignUp({ username: email, confirmationCode: code });\n                alert('E-posta başarıyla doğrulandı! Şimdi giriş yapılıyor...');\n                window.location.href = `${getBasePath()}home.html`;\n            } catch (error) {\n                console.error('Doğrulama hatası:', error);\n                alert(error.message);\n            }\n        });\n    }\n\n    if (resendCodeButton) {\n        resendCodeButton.addEventListener('click', async () => {\n            const email = verifyEmailInput.value;\n            if (!email) {\n                alert('Lütfen e-posta adresinizi girin.');\n                return;\n            }\n            try {\n                await resendSignUpCode({ username: email });\n                alert('Doğrulama kodu tekrar gönderildi.');\n            } catch (error) {\n                console.error('Kodu tekrar gönderme hatası:', error);\n                alert(error.message);\n            }\n        });\n    }\n}\n\n// Logic for home.html (Home Page)\nif (window.location.pathname.includes('home.html')) {\n    const logoutButton = document.getElementById('logout-button');\n\n    if (logoutButton) {\n        logoutButton.addEventListener('click', async () => {\n            try {\n                await signOut();\n                alert('Başarıyla çıkış yapıldı.');\n                window.location.href = `${getBasePath()}index.html`;\n            } catch (error) {\n                console.error('Çıkış yapma hatası:', error);\n                alert(error.message);\n            }\n        });\n    }\n}"],"names":["$c1ce9d969bfa6909$var$getBasePath","window","location","hostname","includes","$c1ce9d969bfa6909$var$checkAuthAndRedirect","getCurrentUser","pathname","href","error","endsWith","container","document","getElementById","registerBtn","loginBtn","signupPasswordInput","strengthMeterContainer","strengthBar","strengthText","toggleForm","isRegister","classList","add","remove","addEventListener","textContent","password","value","requirements","regex","message","length","style","width","strength","firstUnmetRequirement","forEach","req","test","strengthPercentage","loginForm","signupForm","e","preventDefault","email","signIn","username","alert","console","name","encodeURIComponent","signUp","attributes","verifyForm","verifyEmailInput","verificationCodeInput","resendCodeButton","emailFromUrl","urlParams","URLSearchParams","search","get","code","confirmSignUp","confirmationCode","resendSignUpCode","logoutButton","signOut"],"version":3,"file":"Good-Loop_iyilik-zinciri_.2b4df4ea.js.map"}