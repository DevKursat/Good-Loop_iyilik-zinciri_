AWSTemplateFormatVersion: '2010-09-09'
Description: İyilik Zinciri Projesi için temel AWS altyapısı (Cognito, S3, IAM Rolleri, Frontend Hosting)

Resources:
  # CodePipeline Artifacts için S3 Kovası
  CodePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "iyilik-zinciri-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # CodePipeline Hizmet Rolü (CodePipeline'ın kendisi bu rolü üstlenecek)
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: iyilik-zinciri-codepipeline-service-role
      AssumeRolePolicyDocument: # Bu rolü kimler üstlenebilir
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # Basitlik için tam yetki, daha sonra kısıtlanabilir
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument: # Bu rolün ne yapmasına izin verilir
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt CodePipelineArtifactsBucket.Arn
                  - !Sub "${CodePipelineArtifactsBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                  - iam:PassRole # CloudFormationDeploymentRole'ü geçmek için gerekli
                Resource: "*" # Daha sonra kısıtlanabilir

  # CloudFormation Dağıtım Rolü (CodePipeline tarafından dağıtıldığında CloudFormation bu rolü üstlenecek)
  CloudFormationDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: iyilik-zinciri-cloudformation-deployment-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # Tüm kaynakları (Cognito, S3, DynamoDB vb.) oluşturacak

  # 1. Kullanıcı Yönetimi için Cognito
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: iyilik-zinciri-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
        - Name: name
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: birthdate
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: custom:social_twitter
          AttributeDataType: String
          Mutable: true
        - Name: custom:social_instagram
          AttributeDataType: String
          Mutable: true
        - Name: custom:iyilik_tercihleri
          AttributeDataType: String
          Mutable: true
        - Name: custom:profil_kurulumu_tamamlandi
          AttributeDataType: String
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: iyilik-zinciri-web-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false # Web tabanlı istemci için secret gerekmez
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000 # Geliştirme için
        - https://<PROD_URL> # Üretim ortamı için (daha sonra güncellenecek)
      LogoutURLs:
        - http://localhost:3000
        - https://<PROD_URL>

  # 2. Frontend Hosting için S3 Kovası
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "iyilik-zinciri-frontend-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private # CloudFront üzerinden erişim için
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  # 3. CloudFront OAI (Origin Access Identity) - S3'e güvenli erişim için
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for iyilik-zinciri frontend bucket

  # 4. S3 Kovası Politikası - OAI'nin S3'e erişmesine izin verir
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}"
            Action:
              - s3:GetObject
            Resource:
              - !Sub "${FrontendBucket.Arn}/*"

  # 5. CloudFront Dağıtımı - Uygulamayı yayınlar
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  UserPoolId:
    Description: Cognito Kullanıcı Havuzu ID'si
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: Cognito Uygulama İstemci ID'si
    Value: !Ref CognitoUserPoolClient
  CodePipelineServiceRoleArn:
    Description: CodePipeline Hizmet Rolü ARN'si
    Value: !GetAtt CodePipelineServiceRole.Arn
  CloudFormationDeploymentRoleArn:
    Description: CloudFormation Dağıtım Rolü ARN'si
    Value: !GetAtt CloudFormationDeploymentRole.Arn
  CodePipelineArtifactsBucketName:
    Description: CodePipeline Artifacts S3 Kovası Adı
    Value: !Ref CodePipelineArtifactsBucket
  FrontendBucketName:
    Description: Frontend S3 Kovası Adı
    Value: !Ref FrontendBucket
  CloudFrontDistributionDomainName:
    Description: CloudFront Da??t?m Alan Ad?
    Value: !GetAtt CloudFrontDistribution.DomainName
