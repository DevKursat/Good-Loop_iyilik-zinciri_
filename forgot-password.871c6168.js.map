{"mappings":"A,M,qC,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAkB,MAAA,CAAmB,SAAU,IAAI,CAAC,IAAM,EAAc,S,G,E,S,E,S,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SC6BxE,GAtBA,AAAA,EAAA,cAAM,CAAE,SAAS,C,AAAC,G,AAAA,E,U,C,AAAA,E,O,CAAA,GAGjB,AAAA,CAAA,UACG,IAAM,EAAc,OAAO,QAAQ,CAAC,QAAQ,CAI5C,GAAI,CAHiB,CAAA,EAAY,QAAQ,CAAC,MAAQ,EAAY,QAAQ,CAAC,eAAiB,EAAY,QAAQ,CAAC,gBAAkB,EAAY,QAAQ,CAAC,uBAApJ,EAII,GAAI,CAEA,MAAM,AAAA,CAAA,EAAA,EAAA,cAAa,AAAb,GACV,CACA,MAAO,EAAO,CAEV,OAAO,QAAQ,CAAC,IAAI,CAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAgB,YAC3C,CAER,CAAA,IAII,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAQ,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAe,CAC3F,IAAM,EAAY,SAAS,cAAc,CAAC,2BACpC,EAAa,SAAS,aAAa,CAAC,2BACpC,EAAa,SAAS,aAAa,CAAC,2BAG1C,GAAI,OAAO,UAAU,EAAI,IAAK,CAE1B,IAAM,EAAkB,SAAS,aAAa,CAAC,oBAC3C,CAAA,GACA,EAAgB,MAAM,GAG1B,IAAM,EAAqB,SAAS,cAAc,CAAC,qBAC7C,EAAsB,SAAS,cAAc,CAAC,qBAEpD,CAAA,EAAW,KAAK,CAAC,OAAO,CAAG,OAC3B,EAAW,KAAK,CAAC,OAAO,CAAG,OAEvB,GACA,EAAoB,gBAAgB,CAAC,QAAS,AAAC,IAC3C,EAAE,cAAc,GAChB,EAAW,KAAK,CAAC,OAAO,CAAG,OAC3B,EAAW,KAAK,CAAC,OAAO,CAAG,MAC/B,GAEA,GACA,EAAmB,gBAAgB,CAAC,QAAS,AAAC,IAC1C,EAAE,cAAc,GAChB,EAAW,KAAK,CAAC,OAAO,CAAG,OAC3B,EAAW,KAAK,CAAC,OAAO,CAAG,MAC/B,EAER,KAAO,CAEH,IAAM,EAAc,SAAS,cAAc,CAAC,YACtC,EAAW,SAAS,cAAc,CAAC,QACrC,CAAA,GAAa,EAAY,gBAAgB,CAAC,QAAS,IAAM,EAAU,SAAS,CAAC,GAAG,CAAC,WACjF,GAAU,EAAS,gBAAgB,CAAC,QAAS,IAAM,EAAU,SAAS,CAAC,MAAM,CAAC,UACtF,CAGA,IAAM,EAAsB,SAAS,cAAc,CAAC,mBAC9C,EAAyB,SAAS,cAAc,CAAC,4BACjD,EAAc,SAAS,cAAc,CAAC,gBACtC,EAAe,SAAS,cAAc,CAAC,iBACvC,EAAe,SAAS,cAAc,CAAC,eAEzC,IACA,EAAa,WAAW,CAAG,WAC3B,EAAoB,gBAAgB,CAAC,QAAS,KAC1C,IAAM,EAAW,EAAoB,KAAK,CACpC,EAAe,CACjB,CAAE,MAAO,QAAS,QAAS,kBAAmB,EAC9C,CAAE,MAAO,QAAS,QAAS,kBAAmB,EAC9C,CAAE,MAAO,QAAS,QAAS,kBAAmB,EAC9C,CAAE,MAAO,QAAS,QAAS,YAAa,EACxC,CAAE,MAAO,aAAc,QAAS,0BAA2B,EAC9D,CACD,GAAI,AAAoB,IAApB,EAAS,MAAM,CAAQ,CACvB,EAAa,WAAW,CAAG,WAC3B,EAAuB,SAAS,CAAC,MAAM,CAAC,eACxC,EAAY,KAAK,CAAC,KAAK,CAAG,KAC1B,EAAY,SAAS,CAAG,eACxB,MACJ,CACA,IAAI,EAAW,EACX,EAAwB,KAC5B,EAAa,OAAO,CAAC,AAAA,IACb,EAAI,KAAK,CAAC,IAAI,CAAC,GAAW,IACrB,AAAC,GAAuB,CAAA,EAAwB,EAAI,OAAO,AAAP,CACjE,GACA,IAAM,EAAqB,EAAY,EAAa,MAAM,CAAI,GAC9D,CAAA,EAAY,KAAK,CAAC,KAAK,CAAG,CAAA,EAAG,EAAmB,CAAC,CAAC,CAC9C,IAAa,EAAa,MAAM,EAChC,EAAa,WAAW,CAAG,WAC3B,EAAuB,SAAS,CAAC,GAAG,CAAC,iBAErC,EAAa,WAAW,CAAG,CAAA,EAAG,EAAS,CAAC,EAAE,EAAa,MAAM,CAAC,EAAE,EAAE,GAAyB,GAAA,CAAI,CAC/F,EAAuB,SAAS,CAAC,MAAM,CAAC,gBAE5C,EAAY,SAAS,CAAG,eACpB,AAAuB,MAAvB,EAA4B,EAAY,SAAS,CAAC,GAAG,CAAC,UACjD,GAAsB,GAAI,EAAY,SAAS,CAAC,GAAG,CAAC,UACxD,EAAY,SAAS,CAAC,GAAG,CAAC,OACnC,GACA,EAAuB,gBAAgB,CAAC,QAAS,KACzC,EAAuB,SAAS,CAAC,QAAQ,CAAC,gBAC1C,EAAa,aAAa,EAElC,IAIJ,IAAM,EAAkB,SAAS,cAAc,CAAC,eAC1C,EAAqB,SAAS,cAAc,CAAC,kBAC7C,EAAuB,SAAS,cAAc,CAAC,0BAC/C,EAAc,SAAS,cAAc,CAAC,SAE5C,SAAS,IACL,IAAM,EAAQ,EAAgB,KAAK,CAC7B,EAAW,EAAmB,KAAK,CACzC,EAAqB,SAAS,CAAC,MAAM,CAAC,cAAe,EAAM,MAAM,CAAG,GAAK,EAAS,MAAM,CAAG,EAC/F,CACI,GAAmB,IACnB,EAAgB,gBAAgB,CAAC,QAAS,GAC1C,EAAmB,gBAAgB,CAAC,QAAS,IAE7C,GACA,EAAqB,gBAAgB,CAAC,QAAS,KACvC,EAAqB,SAAS,CAAC,QAAQ,CAAC,gBACxC,EAAY,aAAa,EAEjC,GAIA,GACA,EAAY,gBAAgB,CAAC,SAAU,MAAO,IAC1C,EAAE,cAAc,GAChB,IAAM,EAAW,EAAgB,KAAK,CAChC,EAAW,EAAmB,KAAK,CAEzC,GAAI,CACA,MAAM,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,CAAE,SAAA,EAAU,SAAA,CAAS,GAElC,GAAM,CAAA,WAAE,CAAU,CAAE,CAAG,MAAM,AAAA,CAAA,EAAA,EAAA,cAAa,AAAb,GACH,CAAA,CAAU,CAAC,wBAAwB,EAAI,AAAsD,SAAtD,CAAU,CAAC,wBAAwB,CAAC,WAAW,GAG5G,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAc,SAAS,CAAC,CAGlD,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAc,kBAAkB,CAAC,AAGnE,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,gBAAiB,GAC/B,EAAmB,SAAS,CAAC,MAAM,CAAC,eAEhC,AAAe,8BAAf,EAAM,IAAI,CACV,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAc,kBAAkB,EAAE,mBAAmB,GAAA,CAAW,CACnF,AAAe,2BAAf,EAAM,IAAI,EACjB,EAAmB,SAAS,CAAC,GAAG,CAAC,eACjC,WAAW,IAAM,EAAmB,SAAS,CAAC,MAAM,CAAC,eAAgB,KACrE,MAAM,qCAGN,MAAM,EAAM,OAAO,CAE3B,CACJ,GAEA,GACA,EAAa,gBAAgB,CAAC,SAAU,MAAO,IAC3C,EAAE,cAAc,GAChB,IAAM,EAAQ,SAAS,cAAc,CAAC,gBAAgB,KAAK,CACrD,EAAW,EAAoB,KAAK,CAC1C,GAAI,CACA,MAAM,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,CAAE,SAAU,EAAO,SAAA,EAAU,WAAY,CAAE,MAAA,EAAO,OAAQ,CAAM,CAAE,GAC/E,MAAM,sHACN,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAc,kBAAkB,EAAE,mBAAmB,GAAA,CAAQ,AAC3F,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,gBAAiB,GAC/B,MAAM,EAAM,OAAO,CACvB,CACJ,EAER,CAGI,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAClC,AAAC,CAAA,UACG,GAAM,CAAA,cAAE,CAAa,CAAA,iBAAE,CAAgB,CAAE,CAAG,MAA5C,EAAA,SACM,EAAe,SAAS,cAAc,CAAC,wBAEvC,EAAe,AADH,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EAC7B,GAAG,CAAC,QAC/B,CAAA,GAAc,CAAA,EAAa,WAAW,CAAG,CAA7C,EAEA,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,SAAU,MAAO,IACrE,EAAE,cAAc,GAChB,IAAM,EAAO,SAAS,cAAc,CAAC,qBAAqB,KAAK,CAC/D,GAAI,CAAC,GAAgB,CAAC,EAAM,OAAO,MAAM,sCACzC,GAAI,CACA,MAAM,EAAc,CAAE,SAAU,EAAc,iBAAkB,CAAK,GACrE,MAAM,qDACN,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAc,UAAU,CAAC,AACvD,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,oBAAqB,GACnC,MAAM,EAAM,OAAO,CACvB,CACJ,GAEA,IAAM,EAAkB,SAAS,cAAc,CAAC,yBAC1C,EAAmB,CACrB,+BACA,gEACH,CACG,EAAe,EAEnB,SAAS,IACL,EAAgB,SAAS,CAAG;A;A;AAGhC,QAAA,CAAC,CACG,IAAM,EAAa,SAAS,cAAc,CAAC,wBACrC,EAAS,SAAS,cAAc,CAAC,oBAEnC,EAAY,GAChB,EAAgB,SAAS,CAAC,MAAM,CAAC,SACjC,EAAW,KAAK,CAAC,UAAU,CAAG,OAC9B,EAAW,KAAK,CAAC,KAAK,CAAG,KAEzB,IAAM,EAAW,YAAY,KAEzB,IAAM,EAAqB,AAAE,CAAA,MAAK,CAAA,EAAa,GAAM,GACrD,CAAA,EAAW,KAAK,CAAC,UAAU,CAAG,kBAC9B,EAAW,KAAK,CAAC,KAAK,CAAG,CAAA,EAAG,EAAmB,CAAC,CAAC,CACjD,EAAO,WAAW,CAAG,CAAC,kBAAe,EAAE,EAAU,EAAE,CAAC,CAEhD,GAAa,IACb,cAAc,GACd,EAAgB,SAAS,CAAC,GAAG,CAAC,SAC9B,EAAO,WAAW,CAAG,qBAE7B,EAAG,IACP,CAEA,EAAgB,gBAAgB,CAAC,QAAS,UACtC,GAAI,EAAgB,SAAS,CAAC,QAAQ,CAAC,SAAU,CAC7C,GAAI,CAAC,EAAc,OAAO,MAAM,8BAChC,GAAI,CACA,MAAM,EAAiB,CAAE,SAAU,CAAa,GAChD,MAAM,sFACN,GACJ,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,+BAAgC,GAC9C,MAAM,EAAM,OAAO,CACvB,CACJ,MACI,MAAM,CAAgB,CAAC,EAAa,EACpC,EAAgB,AAAA,CAAA,EAAe,CAAA,EAAK,EAAiB,MAAM,AAEnE,GAEA,GACJ,CAAA,IAIA,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,yBAClC,AAAC,CAAA,UACG,IAAM,EAAe,SAAS,cAAc,CAAC,kBACvC,EAAoB,SAAS,cAAc,CAAC,uBAC5C,EAAa,SAAS,cAAc,CAAC,eAE3C,EAAa,gBAAgB,CAAC,SAAU,MAAO,IAC3C,EAAE,cAAc,GAChB,GAAI,CACA,MAAM,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,CAAE,SAAU,EAAW,KAAK,AAAC,GACjD,MAAM,yFAGN,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAkB,SAAS,CAAC,MAAM,CAAC,SAEvC,CAAE,MAAO,EAAO,CAGZ,GAFA,QAAQ,KAAK,CAAC,0BAA2B,GAErC,AAAe,8BAAf,EAAM,IAAI,EAAoC,AAAe,8BAAf,EAAM,IAAI,CAAkC,CAC1F,GAAM,CAAA,iBAAE,CAAgB,CAAE,CAAG,MAA7B,EAAA,SACA,GAAI,CACA,MAAM,EAAiB,CAAE,SAAU,EAAW,KAAK,AAAC,GACpD,MAAM,8HACN,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAc,kBAAkB,EAAE,mBAAmB,EAAW,KAAK,EAAA,CAAG,AACtG,CAAE,MAAO,EAAa,CAClB,QAAQ,KAAK,CAAC,kCAAmC,GACjD,MAAM,0CACV,CACJ,MAEI,MAAM,EAAM,OAAO,CAE3B,CACJ,GAEA,EAAkB,gBAAgB,CAAC,SAAU,MAAO,IAChD,EAAE,cAAc,GAChB,IAAM,EAAmB,SAAS,cAAc,CAAC,cAAc,KAAK,CAC9D,EAAc,SAAS,cAAc,CAAC,gBAAgB,KAAK,CACjE,GAAI,CACA,MAAM,AAAA,CAAA,EAAA,EAAA,oBAAmB,AAAnB,EAAqB,CAAE,SAAU,EAAW,KAAK,CAAE,iBAAA,EAAkB,YAAA,CAAY,GACvF,MAAM,4DACN,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAA,EAAG,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IAAc,UAAU,CAAC,AACvD,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,8BAA+B,GAC7C,MAAM,EAAM,OAAO,CACvB,CACJ,EACJ,CAAA","sources":["<anon>","../../../.npm/_npx/b4a9aa12c0cf34a6/node_modules/@parcel/runtime-js/lib/runtime-985f6fc5eeb5de07.js","src/auth.js"],"sourcesContent":["import \"./home.6a421ab4.js\";\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire2757\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire2757\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8Wpxu\", function(module, exports) {\nmodule.exports = import(\"6fEqA\").then(()=>parcelRequire('brE3Z'));\n\n});\n\nparcelRequire(\"6ZWSX\");\nparcelRequire(\"hPtJY\");\n\nvar $72z4V = parcelRequire(\"72z4V\");\n\nvar $1XYd7 = parcelRequire(\"1XYd7\");\nvar $2yfk2 = parcelRequire(\"2yfk2\");\nvar $hPpH6 = parcelRequire(\"hPpH6\");\nvar $aqcy4 = parcelRequire(\"aqcy4\");\nvar $xBcsQ = parcelRequire(\"xBcsQ\");\n\nvar $le7Hi = parcelRequire(\"le7Hi\");\n\nvar $baa6D = parcelRequire(\"baa6D\");\n(0, $72z4V.DefaultAmplify).configure((0, (/*@__PURE__*/$parcel$interopDefault($le7Hi))));\n// --- Route Protection for Protected Pages ---\n(async ()=>{\n    const currentPath = window.location.pathname;\n    const isPublicPage = currentPath.endsWith('/') || currentPath.endsWith('index.html') || currentPath.includes('verify.html') || currentPath.includes('forgot-password.html');\n    // If we are on a protected page, check for a session.\n    if (!isPublicPage) try {\n        // This will throw an error if the user is not authenticated.\n        await (0, $2yfk2.getCurrentUser)();\n    } catch (error) {\n        // No session, redirect to login.\n        window.location.href = (0, $baa6D.getBasePath)() + 'index.html';\n    }\n})();\n// --- Logic for index.html (Login/Signup Page) ---\nif (window.location.pathname.endsWith('/') || window.location.pathname.endsWith('index.html')) {\n    const container = document.getElementById('auth-container-animated');\n    const signInForm = document.querySelector('.form-container.sign-in');\n    const signUpForm = document.querySelector('.form-container.sign-up');\n    // --- Device-specific form toggling ---\n    if (window.innerWidth <= 768) {\n        // --- MOBILE ---\n        const toggleContainer = document.querySelector('.toggle-container');\n        if (toggleContainer) toggleContainer.remove(); // Remove the element entirely on mobile\n        const showLoginMobileBtn = document.getElementById('show-login-mobile');\n        const showSignupMobileBtn = document.getElementById('show-signup-mobile');\n        signInForm.style.display = 'flex';\n        signUpForm.style.display = 'none';\n        if (showSignupMobileBtn) showSignupMobileBtn.addEventListener('click', (e)=>{\n            e.preventDefault();\n            signInForm.style.display = 'none';\n            signUpForm.style.display = 'flex';\n        });\n        if (showLoginMobileBtn) showLoginMobileBtn.addEventListener('click', (e)=>{\n            e.preventDefault();\n            signInForm.style.display = 'flex';\n            signUpForm.style.display = 'none';\n        });\n    } else {\n        // --- DESKTOP ---\n        const registerBtn = document.getElementById('register');\n        const loginBtn = document.getElementById('login');\n        if (registerBtn) registerBtn.addEventListener('click', ()=>container.classList.add('active'));\n        if (loginBtn) loginBtn.addEventListener('click', ()=>container.classList.remove('active'));\n    }\n    // --- Signup Logic ---\n    const signupPasswordInput = document.getElementById('signup-password');\n    const strengthMeterContainer = document.getElementById('strength-meter-container');\n    const strengthBar = document.getElementById('strength-bar');\n    const strengthText = document.getElementById('strength-text');\n    const signupFormEl = document.getElementById('signup-form');\n    if (signupPasswordInput) {\n        strengthText.textContent = \"Kay\\u0131t Ol\";\n        signupPasswordInput.addEventListener('input', ()=>{\n            const password = signupPasswordInput.value;\n            const requirements = [\n                {\n                    regex: /.{8,}/,\n                    message: \"En az 8 karakter\"\n                },\n                {\n                    regex: /[A-Z]/,\n                    message: \"B\\xfcy\\xfck harf (A-Z)\"\n                },\n                {\n                    regex: /[a-z]/,\n                    message: \"K\\xfc\\xe7\\xfck harf (a-z)\"\n                },\n                {\n                    regex: /[0-9]/,\n                    message: \"Say\\u0131 (0-9)\"\n                },\n                {\n                    regex: /[!@#$%^&*]/,\n                    message: \"\\xd6zel karakter (!@#$%^&*)\"\n                }\n            ];\n            if (password.length === 0) {\n                strengthText.textContent = \"Kay\\u0131t Ol\";\n                strengthMeterContainer.classList.remove('transformed');\n                strengthBar.style.width = '0%';\n                strengthBar.className = 'strength-bar';\n                return;\n            }\n            let strength = 0;\n            let firstUnmetRequirement = null;\n            requirements.forEach((req)=>{\n                if (req.regex.test(password)) strength++;\n                else if (!firstUnmetRequirement) firstUnmetRequirement = req.message;\n            });\n            const strengthPercentage = strength / requirements.length * 100;\n            strengthBar.style.width = `${strengthPercentage}%`;\n            if (strength === requirements.length) {\n                strengthText.textContent = \"Kay\\u0131t Ol\";\n                strengthMeterContainer.classList.add('transformed');\n            } else {\n                strengthText.textContent = `${strength}/${requirements.length}: ${firstUnmetRequirement || ''}`;\n                strengthMeterContainer.classList.remove('transformed');\n            }\n            strengthBar.className = 'strength-bar';\n            if (strengthPercentage === 100) strengthBar.classList.add('strong');\n            else if (strengthPercentage >= 60) strengthBar.classList.add('medium');\n            else strengthBar.classList.add('weak');\n        });\n        strengthMeterContainer.addEventListener('click', ()=>{\n            if (strengthMeterContainer.classList.contains('transformed')) signupFormEl.requestSubmit();\n        });\n    }\n    // --- Login Logic ---\n    const loginEmailInput = document.getElementById('login-email');\n    const loginPasswordInput = document.getElementById('login-password');\n    const loginButtonContainer = document.getElementById('login-button-container');\n    const loginFormEl = document.getElementById('login');\n    function validateLoginInputs() {\n        const email = loginEmailInput.value;\n        const password = loginPasswordInput.value;\n        loginButtonContainer.classList.toggle('transformed', email.length > 0 && password.length > 0);\n    }\n    if (loginEmailInput && loginPasswordInput) {\n        loginEmailInput.addEventListener('input', validateLoginInputs);\n        loginPasswordInput.addEventListener('input', validateLoginInputs);\n    }\n    if (loginButtonContainer) loginButtonContainer.addEventListener('click', ()=>{\n        if (loginButtonContainer.classList.contains('transformed')) loginFormEl.requestSubmit();\n    });\n    // --- Form Submissions ---\n    if (loginFormEl) loginFormEl.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        const username = loginEmailInput.value;\n        const password = loginPasswordInput.value;\n        try {\n            await (0, $aqcy4.signIn)({\n                username: username,\n                password: password\n            });\n            // After successful sign-in, get user attributes to decide the redirect.\n            const { attributes: attributes } = await (0, $2yfk2.getCurrentUser)();\n            const isProfileComplete = attributes['custom:setup_complete'] && attributes['custom:setup_complete'].toLowerCase() === 'evet';\n            if (isProfileComplete) window.location.href = `${(0, $baa6D.getBasePath)()}home.html`;\n            else window.location.href = `${(0, $baa6D.getBasePath)()}profile-setup.html`;\n        } catch (error) {\n            console.error(\"Giri\\u015F hatas\\u0131:\", error);\n            loginPasswordInput.classList.remove('input-error'); // Clear previous errors\n            if (error.name === 'UserNotConfirmedException') window.location.href = `${(0, $baa6D.getBasePath)()}verify.html?email=${encodeURIComponent(username)}`;\n            else if (error.name === 'NotAuthorizedException') {\n                loginPasswordInput.classList.add('input-error');\n                setTimeout(()=>loginPasswordInput.classList.remove('input-error'), 500);\n                alert(\"Kullan\\u0131c\\u0131 ad\\u0131 veya \\u015Fifre hatal\\u0131.\");\n            } else alert(error.message);\n        }\n    });\n    if (signupFormEl) signupFormEl.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        const email = document.getElementById('signup-email').value;\n        const password = signupPasswordInput.value;\n        try {\n            await (0, $xBcsQ.signUp)({\n                username: email,\n                password: password,\n                attributes: {\n                    email: email,\n                    emails: email\n                }\n            });\n            alert(\"Hesap ba\\u015Far\\u0131yla olu\\u015Fturuldu! Do\\u011Frulama kodu e-postana g\\xf6nderildi. Spam (gereksiz) klas\\xf6r\\xfcn\\xfc kontrol etmeyi unutma.\");\n            window.location.href = `${(0, $baa6D.getBasePath)()}verify.html?email=${encodeURIComponent(email)}`;\n        } catch (error) {\n            console.error(\"Kay\\u0131t hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n}\n\n// --- Logic for verify.html ---\nif (window.location.pathname.includes('verify.html')) (async ()=>{\n    const { confirmSignUp: confirmSignUp, resendSignUpCode: resendSignUpCode } = await (parcelRequire(\"8Wpxu\"));\n    const emailDisplay = document.getElementById('verify-email-display');\n    const urlParams = new URLSearchParams(window.location.search);\n    const emailFromUrl = urlParams.get('email');\n    if (emailFromUrl) emailDisplay.textContent = emailFromUrl;\n    document.getElementById('verify-form').addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        const code = document.getElementById('verification-code').value;\n        if (!emailFromUrl || !code) return alert(\"E-posta veya do\\u011Frulama kodu eksik.\");\n        try {\n            await confirmSignUp({\n                username: emailFromUrl,\n                confirmationCode: code\n            });\n            alert(\"E-posta ba\\u015Far\\u0131yla do\\u011Fruland\\u0131! L\\xfctfen giri\\u015F yap\\u0131n.\");\n            window.location.href = `${(0, $baa6D.getBasePath)()}index.html`;\n        } catch (error) {\n            console.error(\"Do\\u011Frulama hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n    const resendContainer = document.getElementById('resend-code-container');\n    const securityMessages = [\n        \"Bu sayfa tamamen g\\xfcvenlidir.\",\n        \"E-posta ula\\u015Fmad\\u0131ysa spam (gereksiz) klas\\xf6r\\xfcn\\xfcz\\xfc kontrol edin.\"\n    ];\n    let messageIndex = 0;\n    function setupResendButton() {\n        resendContainer.innerHTML = `\n            <div id=\"resend-code-progress\"></div>\n            <div id=\"resend-code-text\"></div>\n        `;\n        const progressEl = document.getElementById('resend-code-progress');\n        const textEl = document.getElementById('resend-code-text');\n        let countdown = 30; // Countdown changed to 30 seconds\n        resendContainer.classList.remove('ready');\n        progressEl.style.transition = 'none'; // Disable transition for immediate reset\n        progressEl.style.width = '0%';\n        const interval = setInterval(()=>{\n            countdown--;\n            const progressPercentage = (30 - countdown) / 30 * 100;\n            progressEl.style.transition = 'width 1s linear'; // Re-enable for smooth progress\n            progressEl.style.width = `${progressPercentage}%`;\n            textEl.textContent = `TEKRAR G\\xd6NDER (${countdown}s)`;\n            if (countdown <= 0) {\n                clearInterval(interval);\n                resendContainer.classList.add('ready');\n                textEl.textContent = \"KODU TEKRAR G\\xd6NDER\";\n            }\n        }, 1000);\n    }\n    resendContainer.addEventListener('click', async ()=>{\n        if (resendContainer.classList.contains('ready')) {\n            if (!emailFromUrl) return alert(\"E-posta adresi bulunamad\\u0131.\");\n            try {\n                await resendSignUpCode({\n                    username: emailFromUrl\n                });\n                alert(\"Do\\u011Frulama kodu tekrar g\\xf6nderildi. Spam (gereksiz) klas\\xf6r\\xfcn\\xfc kontrol etmeyi unutma.\");\n                setupResendButton(); // Restart timer\n            } catch (error) {\n                console.error(\"Kodu tekrar g\\xf6nderme hatas\\u0131:\", error);\n                alert(error.message);\n            }\n        } else {\n            alert(securityMessages[messageIndex]); // Changed to alert\n            messageIndex = (messageIndex + 1) % securityMessages.length;\n        }\n    });\n    setupResendButton(); // Initial setup\n})();\n\n// --- Logic for forgot-password.html ---\nif (window.location.pathname.includes('forgot-password.html')) (async ()=>{\n    const sendCodeForm = document.getElementById('send-code-form');\n    const resetPasswordForm = document.getElementById('reset-password-form');\n    const emailInput = document.getElementById('reset-email');\n    sendCodeForm.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        try {\n            await (0, $hPpH6.resetPassword)({\n                username: emailInput.value\n            });\n            alert(\"S\\u0131f\\u0131rlama kodu e-postana g\\xf6nderildi. Spam (gereksiz) klas\\xf6r\\xfcn\\xfc kontrol etmeyi unutma.\");\n            // Switch forms by toggling the 'hidden' class, which is the correct way\n            sendCodeForm.classList.add('hidden');\n            resetPasswordForm.classList.remove('hidden');\n        } catch (error) {\n            console.error(\"\\u015Eifre s\\u0131f\\u0131rlama hatas\\u0131:\", error);\n            if (error.name === 'UserNotConfirmedException' || error.name === 'InvalidParameterException') {\n                const { resendSignUpCode: resendSignUpCode } = await (parcelRequire(\"8Wpxu\"));\n                try {\n                    await resendSignUpCode({\n                        username: emailInput.value\n                    });\n                    alert(\"\\u015Eifrenizi do\\u011Frulaman\\u0131z gerekiyor. Size yeni bir do\\u011Frulama kodu g\\xf6nderdik, l\\xfctfen spam (gereksiz) klas\\xf6r\\xfcn\\xfcz\\xfc kontrol edin.\");\n                    window.location.href = `${(0, $baa6D.getBasePath)()}verify.html?email=${encodeURIComponent(emailInput.value)}`;\n                } catch (resendError) {\n                    console.error(\"Do\\u011Frulama kodu g\\xf6nderme hatas\\u0131:\", resendError);\n                    alert(\"Bir hata olu\\u015Ftu. L\\xfctfen tekrar deneyin.\");\n                }\n            } else alert(error.message);\n        }\n    });\n    resetPasswordForm.addEventListener('submit', async (e)=>{\n        e.preventDefault();\n        const confirmationCode = document.getElementById('reset-code').value;\n        const newPassword = document.getElementById('new-password').value;\n        try {\n            await (0, $1XYd7.confirmResetPassword)({\n                username: emailInput.value,\n                confirmationCode: confirmationCode,\n                newPassword: newPassword\n            });\n            alert(\"\\u015Eifren ba\\u015Far\\u0131yla de\\u011Fi\\u015Ftirildi. \\u015Eimdi giri\\u015F yapabilirsin.\");\n            window.location.href = `${(0, $baa6D.getBasePath)()}index.html`;\n        } catch (error) {\n            console.error(\"Yeni \\u015Fifre ayarlama hatas\\u0131:\", error);\n            alert(error.message);\n        }\n    });\n})();\n\n\n//# sourceMappingURL=forgot-password.871c6168.js.map\n","module.exports = (__parcel__import__(\"6fEqA\")).then(() => parcelRequire('brE3Z'));","import 'buffer';\nimport 'process';\nimport { Amplify } from 'aws-amplify';\nimport { signIn, signUp, getCurrentUser, resetPassword, confirmResetPassword } from 'aws-amplify/auth';\nimport amplifyconfiguration from './amplifyconfiguration.json'; // Relative to src/\nimport { getBasePath } from './utils.js';\n\nAmplify.configure(amplifyconfiguration);\n\n// --- Route Protection for Protected Pages ---\n(async () => {\n    const currentPath = window.location.pathname;\n    const isPublicPage = currentPath.endsWith('/') || currentPath.endsWith('index.html') || currentPath.includes('verify.html') || currentPath.includes('forgot-password.html');\n\n    // If we are on a protected page, check for a session.\n    if (!isPublicPage) {\n        try {\n            // This will throw an error if the user is not authenticated.\n            await getCurrentUser();\n        }\n        catch (error) {\n            // No session, redirect to login.\n            window.location.href = getBasePath() + 'index.html';\n        }\n    }\n})();\n\n\n// --- Logic for index.html (Login/Signup Page) ---\nif (window.location.pathname.endsWith('/') || window.location.pathname.endsWith('index.html')) {\n    const container = document.getElementById('auth-container-animated');\n    const signInForm = document.querySelector('.form-container.sign-in');\n    const signUpForm = document.querySelector('.form-container.sign-up');\n\n    // --- Device-specific form toggling ---\n    if (window.innerWidth <= 768) {\n        // --- MOBILE ---\n        const toggleContainer = document.querySelector('.toggle-container');\n        if (toggleContainer) {\n            toggleContainer.remove(); // Remove the element entirely on mobile\n        }\n\n        const showLoginMobileBtn = document.getElementById('show-login-mobile');\n        const showSignupMobileBtn = document.getElementById('show-signup-mobile');\n\n        signInForm.style.display = 'flex';\n        signUpForm.style.display = 'none';\n\n        if (showSignupMobileBtn) {\n            showSignupMobileBtn.addEventListener('click', (e) => {\n                e.preventDefault();\n                signInForm.style.display = 'none';\n                signUpForm.style.display = 'flex';\n            });\n        }\n        if (showLoginMobileBtn) {\n            showLoginMobileBtn.addEventListener('click', (e) => {\n                e.preventDefault();\n                signInForm.style.display = 'flex';\n                signUpForm.style.display = 'none';\n            });\n        }\n    } else {\n        // --- DESKTOP ---\n        const registerBtn = document.getElementById('register');\n        const loginBtn = document.getElementById('login');\n        if (registerBtn) registerBtn.addEventListener('click', () => container.classList.add('active'));\n        if (loginBtn) loginBtn.addEventListener('click', () => container.classList.remove('active'));\n    }\n\n    // --- Signup Logic ---\n    const signupPasswordInput = document.getElementById('signup-password');\n    const strengthMeterContainer = document.getElementById('strength-meter-container');\n    const strengthBar = document.getElementById('strength-bar');\n    const strengthText = document.getElementById('strength-text');\n    const signupFormEl = document.getElementById('signup-form');\n\n    if (signupPasswordInput) {\n        strengthText.textContent = \"Kayıt Ol\";\n        signupPasswordInput.addEventListener('input', () => {\n            const password = signupPasswordInput.value;\n            const requirements = [\n                { regex: /.{8,}/, message: \"En az 8 karakter\" },\n                { regex: /[A-Z]/, message: \"Büyük harf (A-Z)\" },\n                { regex: /[a-z]/, message: \"Küçük harf (a-z)\" },\n                { regex: /[0-9]/, message: \"Sayı (0-9)\" },\n                { regex: /[!@#$%^&*]/, message: \"Özel karakter (!@#$%^&*)\" }\n            ];\n            if (password.length === 0) {\n                strengthText.textContent = \"Kayıt Ol\";\n                strengthMeterContainer.classList.remove('transformed');\n                strengthBar.style.width = '0%';\n                strengthBar.className = 'strength-bar';\n                return;\n            }\n            let strength = 0;\n            let firstUnmetRequirement = null;\n            requirements.forEach(req => {\n                if (req.regex.test(password)) strength++;\n                else if (!firstUnmetRequirement) firstUnmetRequirement = req.message;\n            });\n            const strengthPercentage = (strength / requirements.length) * 100;\n            strengthBar.style.width = `${strengthPercentage}%`;\n            if (strength === requirements.length) {\n                strengthText.textContent = \"Kayıt Ol\";\n                strengthMeterContainer.classList.add('transformed');\n            } else {\n                strengthText.textContent = `${strength}/${requirements.length}: ${firstUnmetRequirement || ''}`;\n                strengthMeterContainer.classList.remove('transformed');\n            }\n            strengthBar.className = 'strength-bar';\n            if (strengthPercentage === 100) strengthBar.classList.add('strong');\n            else if (strengthPercentage >= 60) strengthBar.classList.add('medium');\n            else strengthBar.classList.add('weak');\n        });\n        strengthMeterContainer.addEventListener('click', () => {\n            if (strengthMeterContainer.classList.contains('transformed')) {\n                signupFormEl.requestSubmit();\n            }\n        });\n    }\n\n    // --- Login Logic ---\n    const loginEmailInput = document.getElementById('login-email');\n    const loginPasswordInput = document.getElementById('login-password');\n    const loginButtonContainer = document.getElementById('login-button-container');\n    const loginFormEl = document.getElementById('login');\n\n    function validateLoginInputs() {\n        const email = loginEmailInput.value;\n        const password = loginPasswordInput.value;\n        loginButtonContainer.classList.toggle('transformed', email.length > 0 && password.length > 0);\n    }\n    if (loginEmailInput && loginPasswordInput) {\n        loginEmailInput.addEventListener('input', validateLoginInputs);\n        loginPasswordInput.addEventListener('input', validateLoginInputs);\n    }\n    if (loginButtonContainer) {\n        loginButtonContainer.addEventListener('click', () => {\n            if (loginButtonContainer.classList.contains('transformed')) {\n                loginFormEl.requestSubmit();\n            }\n        });\n    }\n\n    // --- Form Submissions ---\n    if (loginFormEl) {\n        loginFormEl.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const username = loginEmailInput.value;\n            const password = loginPasswordInput.value;\n\n            try {\n                await signIn({ username, password });\n                // After successful sign-in, get user attributes to decide the redirect.\n                const { attributes } = await getCurrentUser();\n                const isProfileComplete = attributes['custom:setup_complete'] && attributes['custom:setup_complete'].toLowerCase() === 'evet';\n\n                if (isProfileComplete) {\n                    window.location.href = `${getBasePath()}home.html`;\n                }\n                else {\n                    window.location.href = `${getBasePath()}profile-setup.html`;\n                }\n\n            } catch (error) {\n                console.error('Giriş hatası:', error);\n                loginPasswordInput.classList.remove('input-error'); // Clear previous errors\n\n                if (error.name === 'UserNotConfirmedException') {\n                    window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(username)}`;\n                } else if (error.name === 'NotAuthorizedException') {\n                    loginPasswordInput.classList.add('input-error');\n                    setTimeout(() => loginPasswordInput.classList.remove('input-error'), 500);\n                    alert('Kullanıcı adı veya şifre hatalı.');\n                }\n                else {\n                    alert(error.message);\n                }\n            }\n        });\n    }\n    if (signupFormEl) {\n        signupFormEl.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const email = document.getElementById('signup-email').value;\n            const password = signupPasswordInput.value;\n            try {\n                await signUp({ username: email, password, attributes: { email, emails: email } });\n                alert('Hesap başarıyla oluşturuldu! Doğrulama kodu e-postana gönderildi. Spam (gereksiz) klasörünü kontrol etmeyi unutma.');\n                window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(email)}`;\n            } catch (error) {\n                console.error('Kayıt hatası:', error);\n                alert(error.message);\n            }\n        });\n    }\n}\n\n// --- Logic for verify.html ---\nif (window.location.pathname.includes('verify.html')) {\n    (async () => {\n        const { confirmSignUp, resendSignUpCode } = await import('aws-amplify/auth');\n        const emailDisplay = document.getElementById('verify-email-display');\n        const urlParams = new URLSearchParams(window.location.search);\n        const emailFromUrl = urlParams.get('email');\n        if (emailFromUrl) emailDisplay.textContent = emailFromUrl;\n\n        document.getElementById('verify-form').addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const code = document.getElementById('verification-code').value;\n            if (!emailFromUrl || !code) return alert('E-posta veya doğrulama kodu eksik.');\n            try {\n                await confirmSignUp({ username: emailFromUrl, confirmationCode: code });\n                alert('E-posta başarıyla doğrulandı! Lütfen giriş yapın.');\n                window.location.href = `${getBasePath()}index.html`;\n            } catch (error) {\n                console.error('Doğrulama hatası:', error);\n                alert(error.message);\n            }\n        });\n\n        const resendContainer = document.getElementById('resend-code-container');\n        const securityMessages = [\n            \"Bu sayfa tamamen güvenlidir.\",\n            \"E-posta ulaşmadıysa spam (gereksiz) klasörünüzü kontrol edin.\"\n        ];\n        let messageIndex = 0;\n\n        function setupResendButton() {\n            resendContainer.innerHTML = `\n            <div id=\"resend-code-progress\"></div>\n            <div id=\"resend-code-text\"></div>\n        `;\n            const progressEl = document.getElementById('resend-code-progress');\n            const textEl = document.getElementById('resend-code-text');\n            \n            let countdown = 30; // Countdown changed to 30 seconds\n            resendContainer.classList.remove('ready');\n            progressEl.style.transition = 'none'; // Disable transition for immediate reset\n            progressEl.style.width = '0%';\n            \n            const interval = setInterval(() => {\n                countdown--;\n                const progressPercentage = ((30 - countdown) / 30) * 100;\n                progressEl.style.transition = 'width 1s linear'; // Re-enable for smooth progress\n                progressEl.style.width = `${progressPercentage}%`;\n                textEl.textContent = `TEKRAR GÖNDER (${countdown}s)`;\n\n                if (countdown <= 0) {\n                    clearInterval(interval); \n                    resendContainer.classList.add('ready');\n                    textEl.textContent = 'KODU TEKRAR GÖNDER';\n                }\n            }, 1000);\n        }\n\n        resendContainer.addEventListener('click', async () => {\n            if (resendContainer.classList.contains('ready')) {\n                if (!emailFromUrl) return alert('E-posta adresi bulunamadı.');\n                try {\n                    await resendSignUpCode({ username: emailFromUrl });\n                    alert('Doğrulama kodu tekrar gönderildi. Spam (gereksiz) klasörünü kontrol etmeyi unutma.');\n                    setupResendButton(); // Restart timer\n                } catch (error) {\n                    console.error('Kodu tekrar gönderme hatası:', error);\n                    alert(error.message);\n                }\n            } else {\n                alert(securityMessages[messageIndex]); // Changed to alert\n                messageIndex = (messageIndex + 1) % securityMessages.length;\n            }\n        });\n\n        setupResendButton(); // Initial setup\n    })();\n}\n\n// --- Logic for forgot-password.html ---\nif (window.location.pathname.includes('forgot-password.html')) {\n    (async () => {\n        const sendCodeForm = document.getElementById('send-code-form');\n        const resetPasswordForm = document.getElementById('reset-password-form');\n        const emailInput = document.getElementById('reset-email');\n\n        sendCodeForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            try {\n                await resetPassword({ username: emailInput.value });\n                alert('Sıfırlama kodu e-postana gönderildi. Spam (gereksiz) klasörünü kontrol etmeyi unutma.');\n                \n                // Switch forms by toggling the 'hidden' class, which is the correct way\n                sendCodeForm.classList.add('hidden');\n                resetPasswordForm.classList.remove('hidden');\n\n            } catch (error) {\n                console.error('Şifre sıfırlama hatası:', error);\n\n                if (error.name === 'UserNotConfirmedException' || error.name === 'InvalidParameterException') {\n                    const { resendSignUpCode } = await import('aws-amplify/auth');\n                    try {\n                        await resendSignUpCode({ username: emailInput.value });\n                        alert('Şifrenizi doğrulamanız gerekiyor. Size yeni bir doğrulama kodu gönderdik, lütfen spam (gereksiz) klasörünüzü kontrol edin.');\n                        window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(emailInput.value)}`;\n                    } catch (resendError) {\n                        console.error('Doğrulama kodu gönderme hatası:', resendError);\n                        alert('Bir hata oluştu. Lütfen tekrar deneyin.');\n                    }\n                }\n                else {\n                    alert(error.message);\n                }\n            }\n        });\n\n        resetPasswordForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const confirmationCode = document.getElementById('reset-code').value;\n            const newPassword = document.getElementById('new-password').value;\n            try {\n                await confirmResetPassword({ username: emailInput.value, confirmationCode, newPassword });\n                alert('Şifren başarıyla değiştirildi. Şimdi giriş yapabilirsin.');\n                window.location.href = `${getBasePath()}index.html`;\n            } catch (error) {\n                console.error('Yeni şifre ayarlama hatası:', error);\n                alert(error.message);\n            }\n        });\n    })();\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","then","$72z4V","$1XYd7","$2yfk2","$hPpH6","$aqcy4","$xBcsQ","$le7Hi","$baa6D","DefaultAmplify","configure","a","__esModule","default","currentPath","window","location","pathname","endsWith","includes","getCurrentUser","error","href","getBasePath","container","document","getElementById","signInForm","querySelector","signUpForm","innerWidth","toggleContainer","remove","showLoginMobileBtn","showSignupMobileBtn","style","display","addEventListener","e","preventDefault","registerBtn","loginBtn","classList","add","signupPasswordInput","strengthMeterContainer","strengthBar","strengthText","signupFormEl","textContent","password","value","requirements","regex","message","length","width","className","strength","firstUnmetRequirement","forEach","req","test","strengthPercentage","contains","requestSubmit","loginEmailInput","loginPasswordInput","loginButtonContainer","loginFormEl","validateLoginInputs","email","toggle","username","signIn","attributes","toLowerCase","console","name","encodeURIComponent","setTimeout","alert","signUp","emails","confirmSignUp","resendSignUpCode","emailDisplay","emailFromUrl","urlParams","URLSearchParams","search","get","confirmationCode","resendContainer","securityMessages","messageIndex","setupResendButton","innerHTML","progressEl","textEl","countdown","transition","interval","setInterval","progressPercentage","clearInterval","sendCodeForm","resetPasswordForm","emailInput","resetPassword","resendError","newPassword","confirmResetPassword"],"version":3,"file":"forgot-password.871c6168.js.map"}