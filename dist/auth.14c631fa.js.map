{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,W,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,uB,I,A,E,S,oB,E,E,E,O,C,gB,I,A,E,S,a,E,E,E,O,C,iB,I,A,E,S,c,E,E,E,O,C,mB,I,A,E,S,gB,E,E,E,O,C,gB,I,A,E,S,a,E,E,E,O,C,S,I,A,E,S,M,E,E,E,O,C,U,I,A,E,S,O,E,E,E,O,C,S,I,A,E,S,M,E,E,S,E,S,E,S,E,S,E,S,E,S,E,S,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,uB,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEqBO,eAAe,EAAqB,CAAK,EAC5C,IAAM,EAAa,AAAA,EAAA,OAAA,CAAQ,SAAS,GAAG,IAAI,EAAE,QAC7C,AAAA,CAAA,EAAA,EAAA,yBAAA,AAAA,EAA0B,GAC1B,GAAM,CAAA,iBAAE,CAAgB,CAAA,WAAE,CAAU,CAAA,iBAAE,CAAgB,CAAE,CAAG,EACrD,CAAA,SAAE,CAAQ,CAAA,YAAE,CAAW,CAAE,CAAG,EAClC,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAU,AAAA,EAAA,uBAAA,CAAwB,iCAAiC,EAC3F,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAa,AAAA,EAAA,uBAAA,CAAwB,oCAAoC,EACjG,IAAM,EAAO,EAAM,gBAAgB,CACnC,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAM,AAAA,EAAA,uBAAA,CAAwB,yCAAyC,EAC/F,IAAM,EAAW,EAAM,OAAO,EAAE,eAC1B,EAAkB,AAAA,CAAA,EAAA,EAAA,kBAAA,AAAA,EAAmB,CACvC,SAAA,EACA,WAAA,EACA,iBAAA,CACR,GACU,EAAwB,AAAA,CAAA,EAAA,EAAA,iCAAA,AAAA,EAAkC,CAC5D,iBAAkB,AAAA,CAAA,EAAA,EAAA,qCAAA,AAAA,EAAsC,CACpD,iBAAkB,CAC9B,EACA,EACI,OAAM,EAAsB,CACxB,OAAQ,AAAA,CAAA,EAAA,EAAA,uBAAA,AAAA,EAAwB,EAAW,UAAU,EACrD,eAAgB,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,AAAA,EAAA,UAAA,CAAW,oBAAoB,CAC7E,EAAO,CACC,SAAU,EACV,iBAAkB,EAClB,SAAU,EACV,eAAgB,EAChB,SAAU,EAAW,gBAAgB,CACrC,gBAAA,CACR,EACA,C,G,E,Q,S,C,C,C,E,E,E,O,C,oC,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SE9CY,IAAC,EAAoC,AAAC,GAAW,AAAA,CAAA,EAAA,EAAA,iBAAA,AAAA,EAAkB,EAAA,8BAAA,CAAgC,AAAA,CAAA,EAAA,EAAA,wBAAA,AAAA,EAAyB,yBAA0B,AAAA,CAAA,EAAA,EAAA,0BAAA,AAAA,IAA8B,CAC5L,GAAG,EAAA,iCAAA,CACH,GAAG,CAAM,AACb,E,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEeO,eAAe,EAAc,CAAK,EACrC,GAAM,CAAA,SAAE,CAAQ,CAAA,iBAAE,CAAgB,CAAA,QAAE,CAAO,CAAE,CAAG,EAC1C,EAAa,AAAA,EAAA,OAAA,CAAQ,SAAS,GAAG,IAAI,EAAE,QAC7C,AAAA,CAAA,EAAA,EAAA,yBAAA,AAAA,EAA0B,GAC1B,GAAM,CAAA,WAAE,CAAU,CAAA,iBAAE,CAAgB,CAAA,iBAAE,CAAgB,CAAE,CAAG,EACrD,EAAiB,GAAS,eAChC,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAU,AAAA,EAAA,uBAAA,CAAwB,0BAA0B,EACpF,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAkB,AAAA,EAAA,uBAAA,CAAwB,sBAAsB,EACxF,IAAM,EAAkB,AAAA,CAAA,EAAA,EAAA,kBAAA,AAAA,EAAmB,CACvC,SAAA,EACA,WAAA,EACA,iBAAA,CACR,GACU,EAAsB,AAAA,CAAA,EAAA,EAAA,yBAAA,AAAA,EAA0B,CAClD,iBAAkB,AAAA,CAAA,EAAA,EAAA,qCAAA,AAAA,EAAsC,CACpD,iBAAkB,CAC9B,EACA,GACU,CAAE,QAAS,CAAO,CAAE,CAAG,MAAM,EAAoB,CACnD,OAAQ,AAAA,CAAA,EAAA,EAAA,uBAAA,AAAA,EAAwB,EAAW,UAAU,EACrD,eAAgB,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,AAAA,EAAA,UAAA,CAAW,aAAa,CACtE,EAAO,CACC,SAAU,EACV,iBAAkB,EAClB,eAAgB,EAChB,mBAAoB,GAAS,mBAC7B,SAAU,EAAW,gBAAgB,CACrC,gBAAA,CACR,GACI,OAAO,IAAI,QAAQ,CAAC,EAAS,KACzB,GAAI,CACA,IAAM,EAAY,CACd,iBAAkB,CAAA,EAClB,SAAU,CACN,WAAY,MAChC,CACA,EACkB,EAAuB,AAAA,EAAA,eAAA,CAAgB,QAAQ,GACrD,GAAI,CAAC,EAAqB,MAAM,EAC5B,EAAqB,QAAQ,GAAK,EAAU,CAC5C,EAAQ,GACR,AAAA,CAAA,EAAA,EAAA,eAAA,AAAA,IACA,MACJ,CACA,AAAA,EAAA,eAAA,CAAgB,QAAQ,CAAC,CAAE,KAAM,cAAe,MAAO,CAAO,GAC9D,IAAM,EAAe,AAAA,EAAA,WAAA,CAAY,MAAM,CAAC,gBAAiB,CAAC,CAAA,QAAE,CAAO,CAAE,IAExD,eADD,EAAQ,KAAK,GAEb,EAAQ,CACJ,iBAAkB,CAAA,EAClB,SAAU,CACN,WAAY,uBAC5C,CACA,GACwB,IAEZ,GACA,AAAA,EAAA,WAAA,CAAY,QAAQ,CAAC,gBAAiB,CAClC,MAAO,gBACP,KAAM,CACtB,EACQ,CACA,MAAO,EAAO,CACV,EAAO,EACX,CACJ,EACJ,C,G,E,Q,S,C,C,C,E,E,E,O,C,4B,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEpFY,IAAC,EAA4B,AAAC,GAAW,AAAA,CAAA,EAAA,EAAA,iBAAA,AAAA,EAAkB,EAAA,8BAAA,CAAgC,AAAA,CAAA,EAAA,EAAA,wBAAA,AAAA,EAAyB,iBAAkB,AAAA,CAAA,EAAA,EAAA,0BAAA,AAAA,IAA8B,CAC5K,GAAG,EAAA,iCAAA,CACH,GAAG,CAAM,AACb,E,G,E,Q,S,C,C,C,E,E,E,O,C,mB,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEWO,eAAe,EAAiB,CAAK,EACxC,GAAM,CAAA,SAAE,CAAQ,CAAE,CAAG,EACrB,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAU,AAAA,EAAA,uBAAA,CAAwB,mBAAmB,EAC7E,IAAM,EAAa,AAAA,EAAA,OAAA,CAAQ,SAAS,GAAG,IAAI,EAAE,QAC7C,AAAA,CAAA,EAAA,EAAA,yBAAA,AAAA,EAA0B,GAC1B,GAAM,CAAA,iBAAE,CAAgB,CAAA,WAAE,CAAU,CAAA,iBAAE,CAAgB,CAAE,CAAG,EACrD,EAAiB,EAAM,OAAO,EAAE,eAChC,EAAkB,AAAA,CAAA,EAAA,EAAA,kBAAA,AAAA,EAAmB,CACvC,SAAA,EACA,WAAA,EACA,iBAAA,CACR,GACU,EAAyB,AAAA,CAAA,EAAA,EAAA,kCAAA,AAAA,EAAmC,CAC9D,iBAAkB,AAAA,CAAA,EAAA,EAAA,qCAAA,AAAA,EAAsC,CACpD,iBAAkB,CAC9B,EACA,GACU,CAAA,oBAAE,CAAmB,CAAE,CAAG,MAAM,EAAuB,CACzD,OAAQ,AAAA,CAAA,EAAA,EAAA,uBAAA,AAAA,EAAwB,EAAW,UAAU,EACrD,eAAgB,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,AAAA,EAAA,UAAA,CAAW,gBAAgB,CACzE,EAAO,CACC,SAAU,EACV,eAAgB,EAChB,SAAU,EAAW,gBAAgB,CACrC,gBAAA,CACR,GACU,CAAA,eAAE,CAAc,CAAA,cAAE,CAAa,CAAA,YAAE,CAAW,CAAE,CAAG,CACnD,GAAG,CAAmB,AAC9B,EACI,MAAO,CACH,YAAa,EACb,eAAgB,EAChB,cAAe,GAET,KAAA,CACd,CACA,C,G,E,Q,S,C,C,C,E,E,E,O,C,qC,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SElDY,IAAC,EAAqC,AAAC,GAAW,AAAA,CAAA,EAAA,EAAA,iBAAA,AAAA,EAAkB,EAAA,8BAAA,CAAgC,AAAA,CAAA,EAAA,EAAA,wBAAA,AAAA,EAAyB,0BAA2B,AAAA,CAAA,EAAA,EAAA,0BAAA,AAAA,IAA8B,CAC9L,GAAG,EAAA,iCAAA,CACH,GAAG,CAAM,AACb,E,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEaO,eAAe,EAAc,CAAK,EACrC,GAAM,CAAA,SAAE,CAAQ,CAAE,CAAG,EACrB,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAU,AAAA,EAAA,uBAAA,CAAwB,0BAA0B,EACpF,IAAM,EAAa,AAAA,EAAA,OAAA,CAAQ,SAAS,GAAG,IAAI,EAAE,QAC7C,AAAA,CAAA,EAAA,EAAA,yBAAA,AAAA,EAA0B,GAC1B,GAAM,CAAA,iBAAE,CAAgB,CAAA,WAAE,CAAU,CAAA,iBAAE,CAAgB,CAAE,CAAG,EACrD,EAAiB,EAAM,OAAO,EAAE,eAChC,EAAkB,AAAA,CAAA,EAAA,EAAA,kBAAA,AAAA,EAAmB,CACvC,SAAA,EACA,WAAA,EACA,iBAAA,CACR,GACU,EAAiB,AAAA,CAAA,EAAA,EAAA,0BAAA,AAAA,EAA2B,CAC9C,iBAAkB,AAAA,CAAA,EAAA,EAAA,qCAAA,AAAA,EAAsC,CACpD,iBAAkB,CAC9B,EACA,GAUU,EAAsB,AAThB,CAAA,MAAM,EAAe,CAC7B,OAAQ,AAAA,CAAA,EAAA,EAAA,uBAAA,AAAA,EAAwB,GAChC,eAAgB,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,AAAA,EAAA,UAAA,CAAW,aAAa,CACtE,EAAO,CACC,SAAU,EACV,eAAgB,EAChB,SAAU,EACV,gBAAA,CACR,EAAA,EACoC,mBAAmB,CACnD,MAAO,CACH,gBAAiB,CAAA,EACjB,SAAU,CACN,kBAAmB,mCACnB,oBAAqB,CACjB,eAAgB,GAAqB,eACrC,YAAa,GAAqB,YAClC,cAAe,GAAqB,aACpD,CACA,CACA,CACA,C,G,E,Q,S,C,C,C,E,E,E,O,C,6B,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEtDY,IAAC,EAA6B,AAAC,GAAW,AAAA,CAAA,EAAA,EAAA,iBAAA,AAAA,EAAkB,EAAA,8BAAA,CAAgC,AAAA,CAAA,EAAA,EAAA,wBAAA,AAAA,EAAyB,kBAAmB,AAAA,CAAA,EAAA,EAAA,0BAAA,AAAA,IAA8B,CAC9K,GAAG,EAAA,iCAAA,CACH,GAAG,CAAM,AACb,E","sources":["<anon>","node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmResetPassword.mjs","node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmResetPassword.ts","node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs","node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.ts","node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignUp.mjs","node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmSignUp.ts","node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs","node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.ts","node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resendSignUpCode.mjs","node_modules/@aws-amplify/auth/src/providers/cognito/apis/resendSignUpCode.ts","node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs","node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.ts","node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resetPassword.mjs","node_modules/@aws-amplify/auth/src/providers/cognito/apis/resetPassword.ts","node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs","node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire2757\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"brE3Z\", function(module, exports) {\n$parcel$export(module.exports, \"confirmResetPassword\", () => (parcelRequire(\"1XYd7\")).confirmResetPassword);\n$parcel$export(module.exports, \"confirmSignUp\", () => (parcelRequire(\"c7Zwg\")).confirmSignUp);\n$parcel$export(module.exports, \"getCurrentUser\", () => (parcelRequire(\"2yfk2\")).getCurrentUser);\n$parcel$export(module.exports, \"resendSignUpCode\", () => (parcelRequire(\"8XrSp\")).resendSignUpCode);\n$parcel$export(module.exports, \"resetPassword\", () => (parcelRequire(\"hPpH6\")).resetPassword);\n$parcel$export(module.exports, \"signIn\", () => (parcelRequire(\"aqcy4\")).signIn);\n$parcel$export(module.exports, \"signOut\", () => (parcelRequire(\"eARfH\")).signOut);\n$parcel$export(module.exports, \"signUp\", () => (parcelRequire(\"xBcsQ\")).signUp);\nparcelRequire(\"1XYd7\");parcelRequire(\"c7Zwg\");parcelRequire(\"2yfk2\");parcelRequire(\"8XrSp\");parcelRequire(\"hPpH6\");parcelRequire(\"aqcy4\");parcelRequire(\"eARfH\");parcelRequire(\"xBcsQ\");\n\n});\nparcelRegister(\"1XYd7\", function(module, exports) {\n\n$parcel$export(module.exports, \"confirmResetPassword\", () => $cc655f1c8d2537cd$export$890261705c8ce36b);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\n\nvar $bfiP6 = parcelRequire(\"bfiP6\");\nvar $k2DuP = parcelRequire(\"k2DuP\");\n\nvar $ewkqX = parcelRequire(\"ewkqX\");\n\nvar $7XpgE = parcelRequire(\"7XpgE\");\n\nvar $aEls4 = parcelRequire(\"aEls4\");\n\nvar $7fUr4 = parcelRequire(\"7fUr4\");\n\n\n\n\n\n\n\nvar $7Ww7D = parcelRequire(\"7Ww7D\");\n\nvar $eAu1N = parcelRequire(\"eAu1N\");\n\nvar $hXC67 = parcelRequire(\"hXC67\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */ async function $cc655f1c8d2537cd$export$890261705c8ce36b(input) {\n    const authConfig = (0, $1qbEC.Amplify).getConfig().Auth?.Cognito;\n    (0, $bfiP6.assertTokenProviderConfig)(authConfig);\n    const { userPoolClientId: userPoolClientId, userPoolId: userPoolId, userPoolEndpoint: userPoolEndpoint } = authConfig;\n    const { username: username, newPassword: newPassword } = input;\n    (0, $7XpgE.assertValidationError)(!!username, (0, $ewkqX.AuthValidationErrorCode).EmptyConfirmResetPasswordUsername);\n    (0, $7XpgE.assertValidationError)(!!newPassword, (0, $ewkqX.AuthValidationErrorCode).EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    (0, $7XpgE.assertValidationError)(!!code, (0, $ewkqX.AuthValidationErrorCode).EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = (0, $7fUr4.getUserContextData)({\n        username: username,\n        userPoolId: userPoolId,\n        userPoolClientId: userPoolClientId\n    });\n    const confirmForgotPassword = (0, $7Ww7D.createConfirmForgotPasswordClient)({\n        endpointResolver: (0, $eAu1N.createCognitoUserPoolEndpointResolver)({\n            endpointOverride: userPoolEndpoint\n        })\n    });\n    await confirmForgotPassword({\n        region: (0, $hXC67.getRegionFromUserPoolId)(authConfig.userPoolId),\n        userAgentValue: (0, $aEls4.getAuthUserAgentValue)((0, $k2DuP.AuthAction).ConfirmResetPassword)\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData: UserContextData\n    });\n}\n\n});\nparcelRegister(\"7Ww7D\", function(module, exports) {\n\n$parcel$export(module.exports, \"createConfirmForgotPasswordClient\", () => $dc007ddd858e29b1$export$966c1bde6d375783);\n\nvar $6vbP8 = parcelRequire(\"6vbP8\");\n\nvar $bdRfK = parcelRequire(\"bdRfK\");\n\nvar $2qp1o = parcelRequire(\"2qp1o\");\n\nvar $7OD1Z = parcelRequire(\"7OD1Z\");\n\n\n\nvar $luL8F = parcelRequire(\"luL8F\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $dc007ddd858e29b1$export$966c1bde6d375783 = (config)=>(0, $6vbP8.composeServiceApi)((0, $bdRfK.cognitoUserPoolTransferHandler), (0, $2qp1o.createUserPoolSerializer)('ConfirmForgotPassword'), (0, $7OD1Z.createUserPoolDeserializer)(), {\n        ...(0, $luL8F.DEFAULT_SERVICE_CLIENT_API_CONFIG),\n        ...config\n    });\n\n});\n\n\nparcelRegister(\"c7Zwg\", function(module, exports) {\n\n$parcel$export(module.exports, \"confirmSignUp\", () => $3b67ce6a1604acf5$export$2ce39ab6662e8c24);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\n\nvar $bfiP6 = parcelRequire(\"bfiP6\");\nvar $k2DuP = parcelRequire(\"k2DuP\");\nvar $5RCQ5 = parcelRequire(\"5RCQ5\");\n\nvar $7XpgE = parcelRequire(\"7XpgE\");\n\nvar $ewkqX = parcelRequire(\"ewkqX\");\n\nvar $hXC67 = parcelRequire(\"hXC67\");\n\nvar $aEls4 = parcelRequire(\"aEls4\");\n\nvar $7fUr4 = parcelRequire(\"7fUr4\");\n\n\n\n\n\n\n\nvar $kDFKP = parcelRequire(\"kDFKP\");\n\nvar $eAu1N = parcelRequire(\"eAu1N\");\n\nvar $5XcLh = parcelRequire(\"5XcLh\");\n\n\nvar $epZMx = parcelRequire(\"epZMx\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */ async function $3b67ce6a1604acf5$export$2ce39ab6662e8c24(input) {\n    const { username: username, confirmationCode: confirmationCode, options: options } = input;\n    const authConfig = (0, $1qbEC.Amplify).getConfig().Auth?.Cognito;\n    (0, $bfiP6.assertTokenProviderConfig)(authConfig);\n    const { userPoolId: userPoolId, userPoolClientId: userPoolClientId, userPoolEndpoint: userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    (0, $7XpgE.assertValidationError)(!!username, (0, $ewkqX.AuthValidationErrorCode).EmptyConfirmSignUpUsername);\n    (0, $7XpgE.assertValidationError)(!!confirmationCode, (0, $ewkqX.AuthValidationErrorCode).EmptyConfirmSignUpCode);\n    const UserContextData = (0, $7fUr4.getUserContextData)({\n        username: username,\n        userPoolId: userPoolId,\n        userPoolClientId: userPoolClientId\n    });\n    const confirmSignUpClient = (0, $kDFKP.createConfirmSignUpClient)({\n        endpointResolver: (0, $eAu1N.createCognitoUserPoolEndpointResolver)({\n            endpointOverride: userPoolEndpoint\n        })\n    });\n    const { Session: session } = await confirmSignUpClient({\n        region: (0, $hXC67.getRegionFromUserPoolId)(authConfig.userPoolId),\n        userAgentValue: (0, $aEls4.getAuthUserAgentValue)((0, $k2DuP.AuthAction).ConfirmSignUp)\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData: UserContextData\n    });\n    return new Promise((resolve, reject)=>{\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE'\n                }\n            };\n            const autoSignInStoreState = (0, $5XcLh.autoSignInStore).getState();\n            if (!autoSignInStoreState.active || autoSignInStoreState.username !== username) {\n                resolve(signUpOut);\n                (0, $epZMx.resetAutoSignIn)();\n                return;\n            }\n            (0, $5XcLh.autoSignInStore).dispatch({\n                type: 'SET_SESSION',\n                value: session\n            });\n            const stopListener = (0, $5RCQ5.HubInternal).listen('auth-internal', ({ payload: payload })=>{\n                switch(payload.event){\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n                            }\n                        });\n                        stopListener();\n                }\n            });\n            (0, $5RCQ5.HubInternal).dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\n});\nparcelRegister(\"kDFKP\", function(module, exports) {\n\n$parcel$export(module.exports, \"createConfirmSignUpClient\", () => $90cfaee3eca5312c$export$f182f73f82c5c23a);\n\nvar $6vbP8 = parcelRequire(\"6vbP8\");\n\nvar $luL8F = parcelRequire(\"luL8F\");\n\nvar $bdRfK = parcelRequire(\"bdRfK\");\n\nvar $2qp1o = parcelRequire(\"2qp1o\");\n\nvar $7OD1Z = parcelRequire(\"7OD1Z\");\n\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $90cfaee3eca5312c$export$f182f73f82c5c23a = (config)=>(0, $6vbP8.composeServiceApi)((0, $bdRfK.cognitoUserPoolTransferHandler), (0, $2qp1o.createUserPoolSerializer)('ConfirmSignUp'), (0, $7OD1Z.createUserPoolDeserializer)(), {\n        ...(0, $luL8F.DEFAULT_SERVICE_CLIENT_API_CONFIG),\n        ...config\n    });\n\n});\n\n\nparcelRegister(\"8XrSp\", function(module, exports) {\n\n$parcel$export(module.exports, \"resendSignUpCode\", () => $d2f19f127c92a1d4$export$b295e842f1d42d13);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\n\nvar $bfiP6 = parcelRequire(\"bfiP6\");\nvar $k2DuP = parcelRequire(\"k2DuP\");\n\nvar $7XpgE = parcelRequire(\"7XpgE\");\n\nvar $ewkqX = parcelRequire(\"ewkqX\");\n\nvar $hXC67 = parcelRequire(\"hXC67\");\n\nvar $aEls4 = parcelRequire(\"aEls4\");\n\nvar $7fUr4 = parcelRequire(\"7fUr4\");\n\n\n\n\n\n\n\nvar $foJAH = parcelRequire(\"foJAH\");\n\nvar $eAu1N = parcelRequire(\"eAu1N\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */ async function $d2f19f127c92a1d4$export$b295e842f1d42d13(input) {\n    const { username: username } = input;\n    (0, $7XpgE.assertValidationError)(!!username, (0, $ewkqX.AuthValidationErrorCode).EmptySignUpUsername);\n    const authConfig = (0, $1qbEC.Amplify).getConfig().Auth?.Cognito;\n    (0, $bfiP6.assertTokenProviderConfig)(authConfig);\n    const { userPoolClientId: userPoolClientId, userPoolId: userPoolId, userPoolEndpoint: userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = (0, $7fUr4.getUserContextData)({\n        username: username,\n        userPoolId: userPoolId,\n        userPoolClientId: userPoolClientId\n    });\n    const resendConfirmationCode = (0, $foJAH.createResendConfirmationCodeClient)({\n        endpointResolver: (0, $eAu1N.createCognitoUserPoolEndpointResolver)({\n            endpointOverride: userPoolEndpoint\n        })\n    });\n    const { CodeDeliveryDetails: CodeDeliveryDetails } = await resendConfirmationCode({\n        region: (0, $hXC67.getRegionFromUserPoolId)(authConfig.userPoolId),\n        userAgentValue: (0, $aEls4.getAuthUserAgentValue)((0, $k2DuP.AuthAction).ResendSignUpCode)\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData: UserContextData\n    });\n    const { DeliveryMedium: DeliveryMedium, AttributeName: AttributeName, Destination: Destination } = {\n        ...CodeDeliveryDetails\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName ? AttributeName : undefined\n    };\n}\n\n});\nparcelRegister(\"foJAH\", function(module, exports) {\n\n$parcel$export(module.exports, \"createResendConfirmationCodeClient\", () => $5d9a1b3270d661d0$export$cf53d1782ddbc93c);\n\nvar $6vbP8 = parcelRequire(\"6vbP8\");\n\nvar $bdRfK = parcelRequire(\"bdRfK\");\n\nvar $2qp1o = parcelRequire(\"2qp1o\");\n\nvar $7OD1Z = parcelRequire(\"7OD1Z\");\n\n\n\nvar $luL8F = parcelRequire(\"luL8F\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $5d9a1b3270d661d0$export$cf53d1782ddbc93c = (config)=>(0, $6vbP8.composeServiceApi)((0, $bdRfK.cognitoUserPoolTransferHandler), (0, $2qp1o.createUserPoolSerializer)('ResendConfirmationCode'), (0, $7OD1Z.createUserPoolDeserializer)(), {\n        ...(0, $luL8F.DEFAULT_SERVICE_CLIENT_API_CONFIG),\n        ...config\n    });\n\n});\n\n\nparcelRegister(\"hPpH6\", function(module, exports) {\n\n$parcel$export(module.exports, \"resetPassword\", () => $fab9e02a7dab98ac$export$dc726c8e334dd814);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\n\nvar $bfiP6 = parcelRequire(\"bfiP6\");\nvar $k2DuP = parcelRequire(\"k2DuP\");\n\nvar $ewkqX = parcelRequire(\"ewkqX\");\n\nvar $7XpgE = parcelRequire(\"7XpgE\");\n\nvar $hXC67 = parcelRequire(\"hXC67\");\n\nvar $aEls4 = parcelRequire(\"aEls4\");\n\nvar $7fUr4 = parcelRequire(\"7fUr4\");\n\n\n\n\n\n\n\nvar $2NBLh = parcelRequire(\"2NBLh\");\n\nvar $eAu1N = parcelRequire(\"eAu1N\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/ async function $fab9e02a7dab98ac$export$dc726c8e334dd814(input) {\n    const { username: username } = input;\n    (0, $7XpgE.assertValidationError)(!!username, (0, $ewkqX.AuthValidationErrorCode).EmptyResetPasswordUsername);\n    const authConfig = (0, $1qbEC.Amplify).getConfig().Auth?.Cognito;\n    (0, $bfiP6.assertTokenProviderConfig)(authConfig);\n    const { userPoolClientId: userPoolClientId, userPoolId: userPoolId, userPoolEndpoint: userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = (0, $7fUr4.getUserContextData)({\n        username: username,\n        userPoolId: userPoolId,\n        userPoolClientId: userPoolClientId\n    });\n    const forgotPassword = (0, $2NBLh.createForgotPasswordClient)({\n        endpointResolver: (0, $eAu1N.createCognitoUserPoolEndpointResolver)({\n            endpointOverride: userPoolEndpoint\n        })\n    });\n    const res = await forgotPassword({\n        region: (0, $hXC67.getRegionFromUserPoolId)(userPoolId),\n        userAgentValue: (0, $aEls4.getAuthUserAgentValue)((0, $k2DuP.AuthAction).ResetPassword)\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData: UserContextData\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName\n            }\n        }\n    };\n}\n\n});\nparcelRegister(\"2NBLh\", function(module, exports) {\n\n$parcel$export(module.exports, \"createForgotPasswordClient\", () => $f5e6df3ae946b543$export$f8a72614a2df8d41);\n\nvar $6vbP8 = parcelRequire(\"6vbP8\");\n\nvar $bdRfK = parcelRequire(\"bdRfK\");\n\nvar $2qp1o = parcelRequire(\"2qp1o\");\n\nvar $7OD1Z = parcelRequire(\"7OD1Z\");\n\n\n\nvar $luL8F = parcelRequire(\"luL8F\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $f5e6df3ae946b543$export$f8a72614a2df8d41 = (config)=>(0, $6vbP8.composeServiceApi)((0, $bdRfK.cognitoUserPoolTransferHandler), (0, $2qp1o.createUserPoolSerializer)('ForgotPassword'), (0, $7OD1Z.createUserPoolDeserializer)(), {\n        ...(0, $luL8F.DEFAULT_SERVICE_CLIENT_API_CONFIG),\n        ...config\n    });\n\n});\n\n\n\n\n//# sourceMappingURL=auth.14c631fa.js.map\n","import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmResetPassword(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const { username, newPassword } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n    assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmForgotPassword = createConfirmForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await confirmForgotPassword({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword),\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n}\n\nexport { confirmResetPassword };\n//# sourceMappingURL=confirmResetPassword.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmResetPassword(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const { username, newPassword } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n    assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmForgotPassword = createConfirmForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await confirmForgotPassword({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword),\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n}\n","import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createConfirmForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n\nexport { createConfirmForgotPasswordClient };\n//# sourceMappingURL=createConfirmForgotPasswordClient.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createConfirmForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, HubInternal } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport '../../../client/utils/store/signInStore.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmSignUp(input) {\n    const { username, confirmationCode, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmSignUpClient = createConfirmSignUpClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Session: session } = await confirmSignUpClient({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp),\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    return new Promise((resolve, reject) => {\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE',\n                },\n            };\n            const autoSignInStoreState = autoSignInStore.getState();\n            if (!autoSignInStoreState.active ||\n                autoSignInStoreState.username !== username) {\n                resolve(signUpOut);\n                resetAutoSignIn();\n                return;\n            }\n            autoSignInStore.dispatch({ type: 'SET_SESSION', value: session });\n            const stopListener = HubInternal.listen('auth-internal', ({ payload }) => {\n                switch (payload.event) {\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                            },\n                        });\n                        stopListener();\n                }\n            });\n            HubInternal.dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut,\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport { confirmSignUp };\n//# sourceMappingURL=confirmSignUp.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, HubInternal, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmSignUp(input) {\n    const { username, confirmationCode, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmSignUpClient = createConfirmSignUpClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Session: session } = await confirmSignUpClient({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp),\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    return new Promise((resolve, reject) => {\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE',\n                },\n            };\n            const autoSignInStoreState = autoSignInStore.getState();\n            if (!autoSignInStoreState.active ||\n                autoSignInStoreState.username !== username) {\n                resolve(signUpOut);\n                resetAutoSignIn();\n                return;\n            }\n            autoSignInStore.dispatch({ type: 'SET_SESSION', value: session });\n            const stopListener = HubInternal.listen('auth-internal', ({ payload }) => {\n                switch (payload.event) {\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                            },\n                        });\n                        stopListener();\n                }\n            });\n            HubInternal.dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut,\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n","import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createConfirmSignUpClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmSignUp'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n\nexport { createConfirmSignUpClient };\n//# sourceMappingURL=createConfirmSignUpClient.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nexport const createConfirmSignUpClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmSignUp'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function resendSignUpCode(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const resendConfirmationCode = createResendConfirmationCodeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetails } = await resendConfirmationCode({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    const { DeliveryMedium, AttributeName, Destination } = {\n        ...CodeDeliveryDetails,\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName\n            ? AttributeName\n            : undefined,\n    };\n}\n\nexport { resendSignUpCode };\n//# sourceMappingURL=resendSignUpCode.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function resendSignUpCode(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const resendConfirmationCode = createResendConfirmationCodeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetails } = await resendConfirmationCode({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    const { DeliveryMedium, AttributeName, Destination } = {\n        ...CodeDeliveryDetails,\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName\n            ? AttributeName\n            : undefined,\n    };\n}\n","import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createResendConfirmationCodeClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ResendConfirmationCode'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n\nexport { createResendConfirmationCodeClient };\n//# sourceMappingURL=createResendConfirmationCodeClient.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createResendConfirmationCodeClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ResendConfirmationCode'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nasync function resetPassword(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const forgotPassword = createForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const res = await forgotPassword({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n\nexport { resetPassword };\n//# sourceMappingURL=resetPassword.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function resetPassword(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const forgotPassword = createForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const res = await forgotPassword({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n","import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n\nexport { createForgotPasswordClient };\n//# sourceMappingURL=createForgotPasswordClient.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","confirmResetPassword","confirmSignUp","getCurrentUser","resendSignUpCode","resetPassword","signIn","signOut","signUp","$cc655f1c8d2537cd$export$890261705c8ce36b","$1qbEC","$bfiP6","$k2DuP","$ewkqX","$7XpgE","$aEls4","$7fUr4","$7Ww7D","$eAu1N","$hXC67","input","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","username","newPassword","assertValidationError","AuthValidationErrorCode","EmptyConfirmResetPasswordUsername","EmptyConfirmResetPasswordNewPassword","code","confirmationCode","EmptyConfirmResetPasswordConfirmationCode","metadata","options","clientMetadata","UserContextData","getUserContextData","confirmForgotPassword","createConfirmForgotPasswordClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmResetPassword","Username","ConfirmationCode","Password","ClientMetadata","ClientId","$dc007ddd858e29b1$export$966c1bde6d375783","$6vbP8","$bdRfK","$2qp1o","$7OD1Z","$luL8F","config","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","DEFAULT_SERVICE_CLIENT_API_CONFIG","$3b67ce6a1604acf5$export$2ce39ab6662e8c24","$5RCQ5","$kDFKP","$5XcLh","$epZMx","EmptyConfirmSignUpUsername","EmptyConfirmSignUpCode","confirmSignUpClient","createConfirmSignUpClient","Session","session","ConfirmSignUp","ForceAliasCreation","forceAliasCreation","Promise","resolve","reject","signUpOut","isSignUpComplete","nextStep","signUpStep","autoSignInStoreState","autoSignInStore","getState","active","resetAutoSignIn","dispatch","type","value","stopListener","HubInternal","listen","payload","event","data","error","$90cfaee3eca5312c$export$f182f73f82c5c23a","$d2f19f127c92a1d4$export$b295e842f1d42d13","$foJAH","EmptySignUpUsername","resendConfirmationCode","createResendConfirmationCodeClient","CodeDeliveryDetails","ResendSignUpCode","DeliveryMedium","AttributeName","Destination","destination","deliveryMedium","attributeName","undefined","$5d9a1b3270d661d0$export$cf53d1782ddbc93c","$fab9e02a7dab98ac$export$dc726c8e334dd814","$2NBLh","EmptyResetPasswordUsername","forgotPassword","createForgotPasswordClient","codeDeliveryDetails","res","ResetPassword","isPasswordReset","resetPasswordStep","$f5e6df3ae946b543$export$f8a72614a2df8d41"],"version":3,"file":"auth.14c631fa.js.map"}